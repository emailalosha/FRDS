import jenkins.model.Jenkins
import com.cloudbees.plugins.credentials.domains.Domain
import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl
import com.cloudbees.plugins.credentials.CredentialsScope
import hudson.util.Secret
import com.cloudbees.groovy.cps.NonCPS


def base64_decoded
def returned_secret

// Groovy Function to encode input String to Base64 String
def base64Encode(inputString){
    encoded = inputString.bytes.encodeBase64().toString()
    return encoded
}

// Groovy Function to decode Base64 input to String 
def base64Decode(encodedString){
    println encodedString
    byte[] decoded = encodedString.decodeBase64()
    String decode = new String(decoded)
    println decode
    return decode
}

def getSecretFromAwsSecretsManager(secretID,secretName) {
    return sh(script: "aws secretsmanager get-secret-value --secret-id ${secretID} | jq -r .SecretString | jq -r '.'${secretName}", returnStdout: true).trim()
}

def getSecretFromJenkins(varName) {
    withCredentials([string(credentialsId: varName, variable: 'secretName')]) {
        returned_secret=secretName
    }
    return returned_secret
}

def createConfigStoreSecrets(theDomain,theStore){
    println "Creating Config Store Secrets"
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_cs_amConfigAdminPassword","forgerock_cs_amConfigAdminPassword",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_cs_configStoreCertPwd","forgerock_cs_configStoreCertPwd",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_cs_deploymentKey","forgerock_cs_deploymentKey",Secret.fromString("AKZhCazflwQbguAahZcMZAdvBFRL3Q5CBVN1bkVDAI5DbswB0crEt4k"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_cs_monitorUserPassword","forgerock_cs_monitorUserPassword",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_cs_truststorePwd","forgerock_cs_truststorePwd",Secret.fromString("changeit"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_cs_rootUserPassword","forgerock_cs_rootUserPassword",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_cs_certificate","forgerock_cs_certificate",Secret.fromString("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGQ0RDQ0EvQ2dBd0lCQWdJVUdScHREdWNzL2dxY3llZjdkVG9PUC9yYWNnUXdEUVlKS29aSWh2Y05BUUVMDQpCUUF3Z2JZeEN6QUpCZ05WQkFZVEFsVkxNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2DQpibVJ2YmpFUk1BOEdBMVVFQ2d3SVRXbGtjMmhwY0hNeEVUQVBCZ05WQkFzTUNFMXBaSE5vYVhCek1TQXdIZ1lKDQpLb1pJaHZjTkFRa0JGaEZoWkcxcGJrQk5hV1J6YUdsd2N5NXBiekU5TURzR0ExVUVBd3cwS2k1bWIzSm5aWEp2DQpZMnN0WTI5dVptbG5MWE4wYjNKbExtWnZjbWRsY205amF5NXpkbU11WTJ4MWMzUmxjaTVzYjJOaGJEQWVGdzB5DQpNakF4TVRneE5ERTRORGhhRncweU16QXhNVGd4TkRFNE5EaGFNSUcyTVFzd0NRWURWUVFHRXdKVlN6RVBNQTBHDQpBMVVFQ0F3R1RHOXVaRzl1TVE4d0RRWURWUVFIREFaTWIyNWtiMjR4RVRBUEJnTlZCQW9NQ0UxcFpITm9hWEJ6DQpNUkV3RHdZRFZRUUxEQWhOYVdSemFHbHdjekVnTUI0R0NTcUdTSWIzRFFFSkFSWVJZV1J0YVc1QVRXbGtjMmhwDQpjSE11YVc4eFBUQTdCZ05WQkFNTU5Db3VabTl5WjJWeWIyTnJMV052Ym1acFp5MXpkRzl5WlM1bWIzSm5aWEp2DQpZMnN1YzNaakxtTnNkWE4wWlhJdWJHOWpZV3d3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLDQpBb0lCQVFETWhORmJVSXdFUFBVc1JLOTRRbkZ0K1NUdExDRm1lZlRBSUxGSVE4eHV5NXArVXE2RzFCcDRBY09DDQpUbU5wTVJqbTI5R3JMbGFPQ0krOVNWdTRoRDBPR1NZUWRyRXNpN3kwV1V2Y0FTS0FsSjh4dUFLME1VMGVucmhVDQpFMTVvazhwSUNSS2pFVEdHRy90UzJJYW8yOEwxUWFtZ25vV3lFYzRwRXgwSkdTTk5RMGpsRGtqaFRvdnJwREtyDQp6UGFKNnJzNUNKbFNHUTY3MFAxSXl2V3RRY1pIVmFEZStwZmJUdnhlUDY2NUdyOTBKWlp6YnJLazREcEszRmszDQpJUWNEZitTV0I3T294NThjazNTcHFXMTJXRlN4c2c4ZHcrYU83Q2pDbHJHRGVoQW5mVC95Q0kwbDkrTXVWT3cyDQpxOXpQbFNNMFhlQ1plYUlvaFJ3ZWpsWW9zeXRqQWdNQkFBR2pnZ0VLTUlJQkJqQ0NBUUlHQTFVZEVRU0IrakNCDQo5NEl5Wm05eVoyVnliMk5yTFdOdmJtWnBaeTF6ZEc5eVpTNW1iM0puWlhKdlkyc3VjM1pqTG1Oc2RYTjBaWEl1DQpiRzlqWVd5Q05Db3VabTl5WjJWeWIyTnJMV052Ym1acFp5MXpkRzl5WlM1bWIzSm5aWEp2WTJzdWMzWmpMbU5zDQpkWE4wWlhJdWJHOWpZV3lDTmlvdUtpNW1iM0puWlhKdlkyc3RZMjl1Wm1sbkxYTjBiM0psTG1admNtZGxjbTlqDQpheTV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiSUkwS2k1bWIzSm5aWEp2WTJzdFkyOXVabWxuTFhOMGIzSmxMbVp2DQpjbWRsY205amF5NXpkbU11WTJ4MWMzUmxjaTVzYjJOaGJJSWRLaTVsZFMxM1pYTjBMVEl1Wld4aUxtRnRZWHB2DQpibUYzY3k1amIyMHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSVdKeUVYTFVTS3lsbmxQUGtIalgrQVovYkVaDQoveWNuTkNEa1JjbWsxc3c5dE1QRlUrQi8vb0dvVlJ6emlmMVNCamlEenBaampwVXdYSWplVjdwVk5LSWpOTnVjDQpjQ2RUY3VIQWVkVHFFMHVQSGw4Nm54Z1ZPemx4bG1pQWYxTlUrTkVJOVlYSkJEWEJQeE5DK2ZCbzFHQ3N1WXlxDQpRWlUxNjBSUjMzcHdyWTJWK3lBd1c1SCs3bkd6Q21JNjgxTlY2TndUWlJKV3FYT1JUcHR1N0hXaWtBdVBCdlhCDQpEMzdxbWRWa2FlUVBpYkpIRW9BY3hLcnd2WGQ4bG1Ib2RlRHFmNXBPbC9WOGsyeS9oYnIzL0IyTlVweVJVUDZnDQo2UGt4MXN0T1VybVo2MW1HSkhDK3VBNmF2MGxuMVFIZXFPcTJZUVVTc085eXpzc3lQQmw5NHFZUkpJVT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0="))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_cs_certificateKey","forgerock_cs_certificateKey",Secret.fromString("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tDQpNSUlFd0FJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLb3dnZ1NtQWdFQUFvSUJBUURNaE5GYlVJd0VQUFVzDQpSSzk0UW5GdCtTVHRMQ0ZtZWZUQUlMRklROHh1eTVwK1VxNkcxQnA0QWNPQ1RtTnBNUmptMjlHckxsYU9DSSs5DQpTVnU0aEQwT0dTWVFkckVzaTd5MFdVdmNBU0tBbEo4eHVBSzBNVTBlbnJoVUUxNW9rOHBJQ1JLakVUR0dHL3RTDQoySWFvMjhMMVFhbWdub1d5RWM0cEV4MEpHU05OUTBqbERramhUb3ZycERLcnpQYUo2cnM1Q0psU0dRNjcwUDFJDQp5dld0UWNaSFZhRGUrcGZiVHZ4ZVA2NjVHcjkwSlpaemJyS2s0RHBLM0ZrM0lRY0RmK1NXQjdPb3g1OGNrM1NwDQpxVzEyV0ZTeHNnOGR3K2FPN0NqQ2xyR0RlaEFuZlQveUNJMGw5K011Vk93MnE5elBsU00wWGVDWmVhSW9oUndlDQpqbFlvc3l0akFnTUJBQUVDZ2dFQkFJSEYwVlpnOE1lTHFvS1Jmc29QVnd4U0tBVTZtR0wvQmJlWHh3WTB4eGFTDQpxUkI1QkhkWFJRaGJEaVN6K3M1M3NmWmpDMUxVajJXR3R6YUR3dWg5T0lTbW5vbVoxdWlPTG9vOWt5NGhwalB5DQptbVVnL3M0NTdsWjhuamZ6SmxlelY0cUgvMFJybDRJaVpVSDNWTkwyeDJsNlpka2VYWFZWYVB5VlBUcFZzaG5HDQpjcVA0N2E1aFFjZGMyWUVDeVRJUUtOMVFPczVtSGdvMm9GZWFjcloxUHVyNG5hTmR0QkRjSTRnTmZZeEJPdzVaDQphMlRsZnhrZGFnZGxhL3I2b1ZxMDNMcm80dzlKUXpqUWFGemdTTFJOcnhieXhkOHEyVzVZVGt0bytmK1hLdmw5DQpLd3BINTljek1XNmpPaVE0aGxMOWFPbFVhZUxsSGdnajFubkhHZUhCdStrQ2dZRUE2QXA0NWdkZ016ZHM3S1RFDQpIck1RVFV5amdsblMzdWJaZ0cxRE1CL3Yva2dMYm5RMXZoc0hYTFJoTW5ob2xCbkM2M2liSDB5clo1aW9OcElwDQppc29LQTNlbk84RURyaE5jbHhvd2NFcjU1MHVDR1lPVVFYR0VzYlY1SHFCV3U0eDBOZVBOWXNRNXYwc1NFbHBoDQpaMnEwaXp2SXFXV2dMZzJoRjFrdVZZMituYTBDZ1lFQTRhTGE5dEVNV0JKK0FGd3lIa2NrMDIySlI4N2t3SWpMDQpMRVh5QmdBZU56bERyaGxFUmJnSGhqbTY1TGtFaEdKNlMrUXBGdW9WWHUwaUJaajlTMllNS2lyK013U1VlQkFMDQpMbEh6ZVAwb3RwZEZQNGZsN2JaUFphVEV2dEhSNmIwSXpWWG1mb2phSFpqbmRBbFRGSEgxNmFhOGFQUTIwcktUDQpzK3RxZTJuYzcwOENnWUVBanowbnRKZ0pBcFRNWUtpMWlGM3hTa1p0Q1NKNTBhK2Z4Ryt1Y2g3RS82dHBveDJKDQpyM2p2Nm9KUEhlREdiZVlaTlZLV0w1UWNteTdaYUJhQ0huTHFDNG5wYWpHVUcvbEh4dDhiMTdYdzNwNzJDTm40DQp3dzFZWkhzcDhZWDVCSDJIbjF5b2hMZXREakZCVHFNTVRkTEk4TXBPN0lNWGhsWlRneDVDUS8za0ZXRUNnWUVBDQp3Ung2dnVjbjQzRGdPanF1QWsvdGFxN0M0WnhuRjRsOEtnWXJINHVXVUxsSC9ZZE9jVVVSMjRVcE9YeElLMjJGDQpNZEt5Z0JRVCtreUY0N2lPZ0t0MEdkcjErSUFnK2FqeGlORkd5ZlFSbGtSZFZnUmZlMVdmR21Vc3BndzUxZ3lkDQpyZStvOS83MGZvUlJBM1Mva0M0QXc5cWFRbEZSWW43SC95S3EzYms3QiswQ2dZRUExRTBOd29lbkcyaytDNm5DDQpSWUVJT01uam9HbXpzMWZMaHJlTW13UEQyU2o2Z0lEaXAxRE1JbE1wTk5JUlRwWVp4M3JYNnBKQW9GNitHYmc1DQo3QkdkdFA1d3ZndFhJbFFSUURjN2RGbm41dUpXRDByNW5XRkx0aWlUZlJGSkpLNU9wVzFkTXhqK2l1Nnc4VGRWDQpmVE0xMG5CSDB6SUdlK1BuZFdhMmE1aXY5UUk9DQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t"))
    theStore.addCredentials(theDomain, secretText)
}

def createAccessManagerSecrets(theDomain,theStore){
    println "Creating Access Manager Secrets"
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_amAdminPwd","forgerock_am_amAdminPwd",Secret.fromString("Password01"))
    theStore.addCredentials(theDomain, secretText)                   				
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_cfgStoreDirMgrPwd","forgerock_am_cfgStoreDirMgrPwd",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_ctsDirMgrPwd","forgerock_am_ctsDirMgrPwd",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_tomcatJKSPwd","forgerock_am_tomcatJKSPwd",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_truststorePwd","forgerock_am_truststorePwd",Secret.fromString("changeit"))
    theStore.addCredentials(theDomain, secretText)		
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_userStoreDirMgrPwd","forgerock_am_userStoreDirMgrPwd",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_encKey_AmPwd","forgerock_am_encKey_AmPwd",Secret.fromString("PleaseChangeThisF0rPR0DUCT10Nenvironment"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_encKey_directenc","forgerock_am_encKey_directenc",Secret.fromString("PleaseChangeThisF0rPR0DUCT10Nenvironment"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_encKey_hmacsign","forgerock_am_encKey_hmacsign",Secret.fromString("PleaseChangeThisF0rPR0DUCT10Nenvironment"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_encKey_selfservicesign","forgerock_am_encKey_selfservicesign",Secret.fromString("PleaseChangeThisF0rPR0DUCT10Nenvironment"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_cert_es256","forgerock_am_cert_es256",Secret.fromString("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlDSmpDQ0FjNmdBd0lCQWdJVWVKY2ZlejBxMWFxWE44RFNxbVdPcFVnN1hVb3dDUVlIS29aSXpqMEVBVEJxDQpNUXN3Q1FZRFZRUUdFd0pIUWpFUE1BMEdBMVVFQ0F3R1RHOXVaRzl1TVE4d0RRWURWUVFIREFaTWIyNWtiMjR4DQpFVEFQQmdOVkJBb01DRTFwWkhOb2FYQnpNUll3RkFZRFZRUUxEQTFKVkNCRVpYQmhjblJ0Wlc1ME1RNHdEQVlEDQpWUVFEREFWbGN6STFOakFlRncweU1EQXhNRGN3TWpVeU1UQmFGdzB5TVRBeE1EWXdNalV5TVRCYU1Hb3hDekFKDQpCZ05WQkFZVEFrZENNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2Ym1SdmJqRVJNQThHDQpBMVVFQ2d3SVRXbGtjMmhwY0hNeEZqQVVCZ05WQkFzTURVbFVJRVJsY0dGeWRHMWxiblF4RGpBTUJnTlZCQU1NDQpCV1Z6TWpVMk1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRVFPcnJKRmlaZSs3V0hQRHd5Q01lDQo2aDFBNGwvYmR0RFlwV3lqUDhRQVpUbFgxOGtxejlNNVlrV1JhN3d5WENMK3ZHcmxhTEJBRTBiTitmTnJoS05xDQo2S05UTUZFd0hRWURWUjBPQkJZRUZHQlkzRlVSTWdmQURnWkhMMWxGUjA0ZlNCWkZNQjhHQTFVZEl3UVlNQmFBDQpGR0JZM0ZVUk1nZkFEZ1pITDFsRlIwNGZTQlpGTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3Q1FZSEtvWkl6ajBFDQpBUU5IQURCRUFpQllxSytNNTA2UkROQlVXZ3BST2hWc0RrN2lWZS9tRXZkcVFmZnQzNHQzOUFJZ1crNHRmWWhnDQp0MDRTRW91dXZRditCSGorVEZtbDhlbnpKM1p6U3crM3R3bz0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0="))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_cert_es256Key","forgerock_am_cert_es256Key",Secret.fromString("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tDQpNSUdIQWdFQU1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhCRzB3YXdJQkFRUWdUNisvL0h4NllicjhuRVZEDQo3dDFCQzV2K1RuMnlqUENJeUJJc3RiNEF1RENoUkFOQ0FBUkE2dXNrV0psNzd0WWM4UERJSXg3cUhVRGlYOXQyDQowTmlsYktNL3hBQmxPVmZYeVNyUDB6bGlSWkZydkRKY0l2NjhhdVZvc0VBVFJzMzU4MnVFbzJybw0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ0K"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_cert_es384","forgerock_am_cert_es384",Secret.fromString("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlDWlRDQ0FldWdBd0lCQWdJVVVjVENRZTNEWnlZSmJrS0ZzOEd2OEdtUUJ4WXdDUVlIS29aSXpqMEVBVEJxDQpNUXN3Q1FZRFZRUUdFd0pIUWpFUE1BMEdBMVVFQ0F3R1RHOXVaRzl1TVE4d0RRWURWUVFIREFaTWIyNWtiMjR4DQpFVEFQQmdOVkJBb01DRTFwWkhOb2FYQnpNUll3RkFZRFZRUUxEQTFKVkNCRVpYQmhjblJ0Wlc1ME1RNHdEQVlEDQpWUVFEREFWbGN6TTROREFlRncweU1EQXhNRGN3TWpVeU5EWmFGdzB5TVRBeE1EWXdNalV5TkRaYU1Hb3hDekFKDQpCZ05WQkFZVEFrZENNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2Ym1SdmJqRVJNQThHDQpBMVVFQ2d3SVRXbGtjMmhwY0hNeEZqQVVCZ05WQkFzTURVbFVJRVJsY0dGeWRHMWxiblF4RGpBTUJnTlZCQU1NDQpCV1Z6TXpnME1IWXdFQVlIS29aSXpqMENBUVlGSzRFRUFDSURZZ0FFOWJPbGpma0xvTzFncUlJVnQ5b25ILzFzDQpwSnpmckRITlJtK3IrOWRLUXo5cEZTUFQ2WkxKZHMwSUZOTENHdy8xVWtTZkpkSzQzSDZCUW9hcTJHOXh0L0ZHDQplQVhTNXlydDVIVWFXamVyZHNyUDd6SzJaSWN4bGJST2MrZTFjVTBabzFNd1VUQWRCZ05WSFE0RUZnUVVTNkFuDQpVM2F4SkZVKzRVRkVRZFAxU0RhSm5tMHdId1lEVlIwakJCZ3dGb0FVUzZBblUzYXhKRlUrNFVGRVFkUDFTRGFKDQpubTB3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFKQmdjcWhrak9QUVFCQTJrQU1HWUNNUUNpaWRDQ3NjRng5SjVODQpnQTdlRkxBc3J1N3RmdWMxVEs5MGI0ZzUyWS9zWWdPRjVnUWdCT1pyTEtZcjhKUmR1cnNDTVFDRWEyVHV5Y0h5DQo0NHdRaTV5ajUrYmdpT2xTb1YySXpwTmNXakU1SWl3eHA3djA1QTlDZnVxYnc5a3BRWDBFVUZZPQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ=="))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_cert_es384Key","forgerock_am_cert_es384Key",Secret.fromString("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tDQpNSUcyQWdFQU1CQUdCeXFHU000OUFnRUdCU3VCQkFBaUJJR2VNSUdiQWdFQkJEQ2RlMVo0RndqUEQ3cm1CZzFQDQpKaDR0NnpKTk9IbFdaZzZObDQwZWhpRWozemdtZ1V1QVBCY3B6KzZpMy95dEtVMmhaQU5pQUFUMXM2V04rUXVnDQo3V0NvZ2hXMzJpY2YvV3lrbk4rc01jMUdiNnY3MTBwRFAya1ZJOVBwa3NsMnpRZ1Uwc0liRC9WU1JKOGwwcmpjDQpmb0ZDaHFyWWIzRzM4VVo0QmRMbkt1M2tkUnBhTjZ0MnlzL3ZNclpraHpHVnRFNXo1N1Z4VFJrPQ0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ=="))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_cert_es512","forgerock_am_cert_es512",Secret.fromString("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlDWkRDQ0FldWdBd0lCQWdJVWZQKzVKOTVjOEYxbTZHWTBkQ29RMHFldlYxOHdDUVlIS29aSXpqMEVBVEJxDQpNUXN3Q1FZRFZRUUdFd0pIUWpFUE1BMEdBMVVFQ0F3R1RHOXVaRzl1TVE4d0RRWURWUVFIREFaTWIyNWtiMjR4DQpFVEFQQmdOVkJBb01DRTFwWkhOb2FYQnpNUll3RkFZRFZRUUxEQTFKVkNCRVpYQmhjblJ0Wlc1ME1RNHdEQVlEDQpWUVFEREFWbGN6VXhNakFlRncweU1EQXhNRGN3TWpVek1ETmFGdzB5TVRBeE1EWXdNalV6TUROYU1Hb3hDekFKDQpCZ05WQkFZVEFrZENNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2Ym1SdmJqRVJNQThHDQpBMVVFQ2d3SVRXbGtjMmhwY0hNeEZqQVVCZ05WQkFzTURVbFVJRVJsY0dGeWRHMWxiblF4RGpBTUJnTlZCQU1NDQpCV1Z6TlRFeU1IWXdFQVlIS29aSXpqMENBUVlGSzRFRUFDSURZZ0FFdWFkRFNwbmdqbHU2UmpKYkV2WlpXL3JGDQpBY1RPa3Y4VGE5bS9mTGZmaUhMT3g2MmdSODFTSVZiOExTREhpaGNWdWE0N0lvZDY3MHBQY25GMG1WWmp4RHVXDQp2TEZOd05PUkY1a1FMMmlKamZ3RmI3a2VpYzFORFA1dUY4cmV4Yy9qbzFNd1VUQWRCZ05WSFE0RUZnUVVVZVFVDQpibVpyYXZtNDU3Rnh4ZFBmZ3czVTlPd3dId1lEVlIwakJCZ3dGb0FVVWVRVWJtWnJhdm00NTdGeHhkUGZndzNVDQo5T3d3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFKQmdjcWhrak9QUVFCQTJnQU1HVUNNUURkbEJpWmtLMzFXWml1DQpIVlBzYzk3N0RGbllWTFBUWW1YSkpBQVdaWE45M1VNbGZIYjEwYjVqZVJ1ZXZVVUNxUzRDTUVZNE4zUkRHQWhODQpyV3laR0pUcloyRHE1SnlnazdrdXBtT1p3ZDZCMnVVUG1jKzdiUFo2dkREMURnT01zUEFnN0E9PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ=="))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_cert_es512Key","forgerock_am_cert_es512Key",Secret.fromString("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tDQpNSUcyQWdFQU1CQUdCeXFHU000OUFnRUdCU3VCQkFBaUJJR2VNSUdiQWdFQkJEQndzOExhWEtmOFlKZC9Vb1FJDQo2YVdwTWZ6NkZUMElyV2lFQy9IUHpNTTJNMmZWdG9RZFhFdVNVM3dKT21SYjF3U2haQU5pQUFTNXAwTkttZUNPDQpXN3BHTWxzUzlsbGIrc1VCeE02Uy94TnIyYjk4dDkrSWNzN0hyYUJIelZJaFZ2d3RJTWVLRnhXNXJqc2loM3J2DQpTazl5Y1hTWlZtUEVPNWE4c1UzQTA1RVhtUkF2YUltTi9BVnZ1UjZKelUwTS9tNFh5dDdGeitNPQ0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ0K"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_cert_general","forgerock_am_cert_general",Secret.fromString("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEc3pDQ0FwdWdBd0lCQWdJVUlxcVBzU1FaUUlDNklLcWRJZm95ODhWcHliMHdEUVlKS29aSWh2Y05BUUVMDQpCUUF3YVRFTE1Ba0dBMVVFQmhNQ1IwSXhEekFOQmdOVkJBZ01Ca3h2Ym1SdmJqRVBNQTBHQTFVRUJ3d0dURzl1DQpaRzl1TVJFd0R3WURWUVFLREFoTmFXUnphR2x3Y3pFV01CUUdBMVVFQ3d3TlNWUWdSR1Z3WVhKMGJXVnVkREVODQpNQXNHQTFVRUF3d0VkR1Z6ZERBZUZ3MHlNREF4TURZd09USXhNakphRncweU1UQXhNRFV3T1RJeE1qSmFNR2t4DQpDekFKQmdOVkJBWVRBa2RDTVE4d0RRWURWUVFJREFaTWIyNWtiMjR4RHpBTkJnTlZCQWNNQmt4dmJtUnZiakVSDQpNQThHQTFVRUNnd0lUV2xrYzJocGNITXhGakFVQmdOVkJBc01EVWxVSUVSbGNHRnlkRzFsYm5ReERUQUxCZ05WDQpCQU1NQkhSbGMzUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEU2xkOVpRb2xODQpBT2lRWUdsbExVV3JlU3kzbnVjQWVHSUt2K0xZZ0hpcDl6RlhvSGtNdmZyWU94V0FTN3pXUVIxOHYySmxnYTA1DQphSUNFc01xcHVzWWlpckhoS2hXRkRMRzRWQlQ0ck1QaEh1dHAwNHRUajB0YmRva3hwUUFrU3JpbjMvQjdtR0RZDQo2NmEvZis5U2h3V0E5UWJHQjF2OXpEYVhXWWlXMnJzZk9ibm5UTGNzdWdGWllOK3NyTC9lMGZ1S1hnRkxiYk5wDQp3ZVJHdUIrMnd5a1J2WlZTM2c4d1NVVDZTSjluZmo0YXNqUnloY29TS2YzUnNrR2l1dW56U2JRZmFYcXZ3RVhBDQprRnhtWit1SXJTU2NsVnFmRzYra3hMcEZBZ0tBaUhpY1ZBYUFpMEc3UlJWZGowS1MzU09qRXZqbU9kclN2RW9yDQpjd1FRdmVjYkxIbWJBZ01CQUFHalV6QlJNQjBHQTFVZERnUVdCQlNUckdycWFOUmNWUnVGaDFnaENGNG16Z1hHDQp5REFmQmdOVkhTTUVHREFXZ0JTVHJHcnFhTlJjVlJ1RmgxZ2hDRjRtemdYR3lEQVBCZ05WSFJNQkFmOEVCVEFEDQpBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCZjVlT2w3dWl0ZTVDdU1JK3dQeUpQc2orNzFBK29adnE2DQpPdEhVeGc5Zm5zWHZmd1BPWER3dVhvRzRhejVLeWRYN0lrSnllODBSMFlsQ0w2NzlqWkkrUVFscVRYdFJveFJhDQp1UGdYRTQreXkxNjV1WXJRa1B5aXFSUUtEeUtTODZVMUx0MjdocFFrSU1aeURhbGxiSld5M1IyYitBTU01VHQ0DQpycjdOTllEQVE2bkZteUFHd0RaSDBhUE1aWldEdXFFdHdLVzVuWW9idmdDTGlDM1d6bWpTeFhTQVdmbWp0Vk1BDQp1R1BWOTRwaWd3MVNyUTJTeHVPT0dwNkNpWXJwNW9JUUpJTDlUbzVSUmFNbXVYUjgzV015eFVXeWhEdktNd3YrDQpqbmg2NG1MYSt2Q29MS1RqUXVmNzhiK1NKcDlyeFk0SC9TR20zZTZhL1ZCakVvQVB4UVpZDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQo="))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_cert_generalKey","forgerock_am_cert_generalKey",Secret.fromString("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tDQpNSUlFdkFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLWXdnZ1NpQWdFQUFvSUJBUURTbGQ5WlFvbE5BT2lRDQpZR2xsTFVXcmVTeTNudWNBZUdJS3YrTFlnSGlwOXpGWG9Ia012ZnJZT3hXQVM3eldRUjE4djJKbGdhMDVhSUNFDQpzTXFwdXNZaWlySGhLaFdGRExHNFZCVDRyTVBoSHV0cDA0dFRqMHRiZG9reHBRQWtTcmluMy9CN21HRFk2NmEvDQpmKzlTaHdXQTlRYkdCMXY5ekRhWFdZaVcycnNmT2JublRMY3N1Z0ZaWU4rc3JML2UwZnVLWGdGTGJiTnB3ZVJHDQp1Qisyd3lrUnZaVlMzZzh3U1VUNlNKOW5majRhc2pSeWhjb1NLZjNSc2tHaXV1bnpTYlFmYVhxdndFWEFrRnhtDQpaK3VJclNTY2xWcWZHNitreExwRkFnS0FpSGljVkFhQWkwRzdSUlZkajBLUzNTT2pFdmptT2RyU3ZFb3Jjd1FRDQp2ZWNiTEhtYkFnTUJBQUVDZ2dFQUtIZW9qZ3lkT2ZEOHdCSG03d3grSU8rT1NsTDg3VGcxRHYvRTVmbjZOaDlNDQptaHc2WnRwelErNUd1WHJVZFEvYVRNaXliZk0zaUpxdVo5RlpnTGhscnVtY09UclBHOXhPb3E5MXdEdmpBSFhpDQpvMW1Gb3E4Y3VoelRUSGo2eC82YjhaYTFMZXNnWVU4WG9pRkJxa2hNSkhYeHNVaGt3eWJsTHJ5RDVRbHZnQlpNDQpOOUtSLy9LREhncjlWWm1COGx0WUxJUFE4dUFRNENlT0t0SHVHV0tiWmFaK3dHUFZDbUx3S01PWkRUYzlNSTFlDQpiZTRIYUxYR0ZSempabThCejA0eFFZMTRLWVkrZ3lxMTNhN2FJanNQU2pkbXA2VXNnejl2VTU5d1FaZW1vbjV6DQplaHBaVDhFdFJZdXhXamcxLzBLYXl0WENlakp4cFc2L1BkYUowdWx6TVFLQmdRRDhoNlB2Z212MGVhbjJlTTREDQpuZVAwSm9sVEdVWCtkMlVtRFdZSmc3NXl3L0l3UDBhSVhCdDkwL2l0WDByNm5ORkpIZWZaZ3JCTnd5dlkxYUowDQpKTnZ4ZG1PN3NNN3NES2ZyS2xaZlF4dnJzWmsydUdaeW9qRExpNzhTRnBDSVJTa09SSlJFaGZJWDNsRmtxcXM2DQpiamliM0FhOUJ5U0l6TE1PMEV5czJNMnB6d0tCZ1FEVmVxMnBmVC9oaG05K2VTQzUrdERKbzVPdlpzZ2lPSkErDQoySzcyaXlSODVSSS9RQVBoeEp2UlpvME5kUWFkODZTSEYySGR1UFdWK3JUb1RvZk9xNWFHZE5rbmRRa0NySVpTDQprc1QvNlVIL05CdWhMU3BSeHAwbVBHV0owbjRYNU9oQnIyMHUyRmFCbTllNW1zSG5iYXpwTDhERkZxbWJFNGdMDQpiK1Bya0ZIQ2RRS0JnSGltR1ZXaHV4QVhYSE9NTGVrZWN6MC9lQmFDbWFWRXg4ZVJXVEdzaHIzd0RmS3RHSGFuDQpndDd2K2Z4aTdjQ2tVWDBjVTV2Z3kzaXJpWFJVUlFRMlkvcU45SUpFcStlcytFRHJmazZQRW5UZDZmUnh6MGh2DQpZdDZzaW9JSzA4eTNOakZCNUpDRWFqQ3JIN24zckUwRFFmcDgrWjh3SFcxYVZ5WDVzTmhYMEpLVEFvR0FUdFFtDQpIRmZycHRPRmlDWWlONHF1WGtiUTJnd1NDdERvTXN6QWpybUNsN3ZlcVF4eVlvTy9KZXZBV2gvRWViN21HaHhBDQpQeWQxU0JSemlQUzJvVklyR3lzNnBKOUszSG5vZjhWQ2lWMFF5YlBzSC9BVm1Hekd5cit5bnRualJkOTVCQWhMDQpRT2tSeUhwTGhuWG05QlpEcXplKzd3Z1hTUFJGWURQSTdjczA1YUVDZ1lCenVTTFhYVDIrdWtXcU5veFBUeVJ5DQoyclVkUDMyVW96YU5kSUx2OE1UNDhHbUh4clg3MHc5dHZYQ2o1TUtNQ2ZKL3k5a0ZROXRTb1hNdS8weTNSdkF1DQpBRng3V1UvVUtRbXUzemxtWldRVEZKSGhjcEFvQjNNNmk1Skt5OGpQYVVRRUl2emNTNlh5NVltVjBUVkFzMkZkDQpIeXJYbnJ5ZjdvMUg2enRlSnFkdGlRPT0NCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0="))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_cert_rsajwtsign","forgerock_am_cert_rsajwtsign",Secret.fromString("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEdnpDQ0FxZWdBd0lCQWdJVURtam9IbkYwVUo2SEJGd1dSS1R3c0JNK1lBTXdEUVlKS29aSWh2Y05BUUVMDQpCUUF3YnpFTE1Ba0dBMVVFQmhNQ1IwSXhEekFOQmdOVkJBZ01Ca3h2Ym1SdmJqRVBNQTBHQTFVRUJ3d0dURzl1DQpaRzl1TVJFd0R3WURWUVFLREFoTmFXUnphR2x3Y3pFV01CUUdBMVVFQ3d3TlNWUWdSR1Z3WVhKMGJXVnVkREVUDQpNQkVHQTFVRUF3d0tjbk5oYW5kMGMybG5iakFlRncweU1EQXhNRFl3T1RFek1UQmFGdzB5TVRBeE1EVXdPVEV6DQpNVEJhTUc4eEN6QUpCZ05WQkFZVEFrZENNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2DQpibVJ2YmpFUk1BOEdBMVVFQ2d3SVRXbGtjMmhwY0hNeEZqQVVCZ05WQkFzTURVbFVJRVJsY0dGeWRHMWxiblF4DQpFekFSQmdOVkJBTU1Dbkp6WVdwM2RITnBaMjR3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLDQpBb0lCQVFETTlwdExsVlVBcWcwaW5LVWlmeEZQUDBPUkYzVHBYUGIxbHlCU280dUd0UFN3bXV1UWtXUTlnSnBQDQpvYXhuMnZsOEk5SHBXOWp3c2JvVEZCcHp4Q05xQ0lTK05ZYlRrOUxoWVlnellROVZjejdZczhUMnVVV0toZEkwDQp3dHRVRlJSc2M3RVFiWmhnZHFpWDBJS1ZGeHd0TUdEMVdHMTNNd2pkREFTSVgyWXExdEtYaE8zV0M5RnJxYTB2DQpGSWQ5bUo5RnJFQ2RZeXcwUFcvWndCRWVMSHBIL1NkSXRlMGc5cytKdEZab3dJR20vNUJwZ3BZNXJndER4ZnhiDQpkWW1vcnQ4U3Q1WlpBMGpjanFiVk1veTNZVVErQW0vNG10R3hyZ2lvUDZGYmlKK2xjdDdkQjhKK3BYOWhIVjVpDQpQMzVmdThmdHVxTjM0WlVpRXZNVkNYU0JrdmNoQWdNQkFBR2pVekJSTUIwR0ExVWREZ1FXQkJUbzR6VE1CaDJnDQpKSFdwY29WRW5ZNkJVWHliQ0RBZkJnTlZIU01FR0RBV2dCVG80elRNQmgyZ0pIV3Bjb1ZFblk2QlVYeWJDREFQDQpCZ05WSFJNQkFmOEVCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQjZxVyt6V2VSamh3WTdJL3gzDQpEcUExZEMxc1RYSFlkakZhSHh1S0FqcEhUWE5vOS9lc2dYcUsrajdKY0t4Q2FWbkpTY2lxQVIyVHBCd2w2ZWpLDQpSSmxXNUpGS1JpR2R0VVhIazdXVmN5L0p3YndTSXZlTTNxbXRZZVVyUmxDdU9MOW5qNGhuSThWa09XWGtpZmx3DQpuNjVsc0pqS00vVWdzemdTWWRscDFabVhrVkFERkNZOEJGUVd4b0hNbldwY0JTK2F1RWQ2S2hLWWZyUE0xUUNYDQpybEd6cW9yTVV1bEtRMVY2WnZwdDJoSFp3S1V6M0tvWklpUWhRc0JJZ2JKZEVkNHJVN0xLYVB5NHhBbE5zSUVnDQpReGVkNEJnOThRL0lZT3FlOGowRHd0LzFPamE5ZmpFVlhsUHdWRjE5bEhrYTRkQ3ZWaE5sMHhRUmFmWXh1MTVkDQplR3ZjDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_cert_rsajwtsignKey","forgerock_am_cert_rsajwtsignKey",Secret.fromString("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tDQpNSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUURNOXB0TGxWVUFxZzBpDQpuS1VpZnhGUFAwT1JGM1RwWFBiMWx5QlNvNHVHdFBTd211dVFrV1E5Z0pwUG9heG4ydmw4STlIcFc5andzYm9UDQpGQnB6eENOcUNJUytOWWJUazlMaFlZZ3pZUTlWY3o3WXM4VDJ1VVdLaGRJMHd0dFVGUlJzYzdFUWJaaGdkcWlYDQowSUtWRnh3dE1HRDFXRzEzTXdqZERBU0lYMllxMXRLWGhPM1dDOUZycWEwdkZJZDltSjlGckVDZFl5dzBQVy9aDQp3QkVlTEhwSC9TZEl0ZTBnOXMrSnRGWm93SUdtLzVCcGdwWTVyZ3REeGZ4YmRZbW9ydDhTdDVaWkEwamNqcWJWDQpNb3kzWVVRK0FtLzRtdEd4cmdpb1A2RmJpSitsY3Q3ZEI4SitwWDloSFY1aVAzNWZ1OGZ0dXFOMzRaVWlFdk1WDQpDWFNCa3ZjaEFnTUJBQUVDZ2dFQUpvSWFzVHV3U2J5cFZSeHJKaTBMZW9FZlY2NDVoL0t3YjNuaVY4UmtYWDI0DQpEMG84QWVCZkhmTUFpditNSGNNVlpvNXdUTkMxMUpyL283LytMRXZvZjI1MFNpeFNWWVFMZGM3V1FSajJRWTZ5DQpleEpqYWh0ckJsaVlJdE9OVTZIV1FYNEhBVmdsN2RHOVlUQ0txQ284WC8wYjZseWZ6R3BwT3VhY0gyY1ZFZTBPDQpkUUlDR2Z2MGRYaC9kSjB4T1dZeHpFRE5aQmFsLzU4Tk9qU0svTVRLUk16RTNuUVQ5SmNXbFNUbkQvMzlEMnFNDQorcmtYTjliMU01VDlKY3RhQUxQWVRWYXlMZGxrcGJMa1hHOExZOVNXWFZCcGkwcWpZa1RxRFp0cHBkYmVXVVdoDQpnbk05NnVBL3IzaVcxcllkNG9RRDNKMWdFMStncE1xdmZFL2cvbmtCNVFLQmdRRG9KVnBpYmwzNURKTHZKM2luDQp5K24yTXJRZjc3ZGR5NjBXeDZoVFBKSTRYKzZzWUlJY2txZGV1d2lzWjk0ZEVtWVo1dlQ0ZDFwZmtPdkdDa2k2DQpDRENwWllva2tFTU1HcFNUY1EyVlJXaWtQVk1jMk1HSmo0bFZlWkhmS3VJSDZVZGlmaEljSkk0NnhJQ2g5VXVIDQpiUlBBNEFjamNzZ2dmL2duZDArZDNJcGxSd0tCZ1FEaUJqV2Z0ODU2V0hVWDh0aVE4alY4ZDlCblJDZmlwejl1DQpzQ0ZTaDlvd2FMQ2RqNkk2TTdrT05oM2RhLytxWTJwODNjaGt5d2pkRzVLbnNmSnB5cFBGRnRac1dLemtMNTRZDQpUOWdMSGJuMDc2UVBGTjRIWkZ0S1hTaG1TZGE0VlJ2d1ROQnRISnU4bjVtM0E0QjFRdFFqWmo3SklGeld4MnJ3DQpaVC81ME5jVVZ3S0JnUUMxbUZLbDRQUDkyQW93cmszQjVNOTEyWi94dzVGSy9BTEFhUnFSVWphSGh2T3JRQ3RIDQpzcWplZjZ4L1FSa000TkdodlhzdnloMlYyRVczTzJBOHRoOXF3NVZXbU1yNTh1ajZsVnNzdzRqaHdWNzhsOHA5DQpreHk1RWtvN3FzMzVwbEJEQ1orZENET0NZU2pHaUoyMnFHcmxXOW41cnRaQ0poaTJ0cXcvTHIvTURRS0JnUUNiDQpvSlRwcllEUlF2a1ZEVlJLc1V0Y3NZN2dtOUF1d3VQdFRmOFR1WkRsaGlBZHpSbHhvODJHMklKRnhLZ2NaU21jDQpZb1VweVpjSHo0VnlUQmRTK25ZMjNadTBySFlYQkNhQ0xPL2Y3NDdyOU5sc3ZQeUg4SFRmUmplYi9ybUc0S3RGDQpFVTd0NGlYbGdhc3dsWXVzc2VBcG82d1ZobUFHVHZiMklYRWtqTVNiTHdLQmdFR1d2YjRrWDJOZTdHNGdWSEZqDQpIZElnZ3paeEM0cjNUZU1OdnBFd1AyYTFqSU5pTXJQRHMzT0xZaXBKS2ZRRFA3TXhhVGJUZWZ2bXlmbHZXYVkxDQpzeVNXa3AwUXdFZ2dmWHhnSFFIMndXNlc4ODlhNXZzU1RJZUhPUVJXME1GRTA0NjBFS3IzOFI1ZkdldmkwR2VODQpVbFJSLzZIWUR1ZmsyT09sZkY1blJmVzUNCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0="))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_cert_selfserviceenc","forgerock_am_cert_selfserviceenc",Secret.fromString("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEeHpDQ0FxK2dBd0lCQWdJVUJSckY4STVtYWk1US9xS2lQc2IyaW0vZDRDY3dEUVlKS29aSWh2Y05BUUVMDQpCUUF3Y3pFTE1Ba0dBMVVFQmhNQ1IwSXhEekFOQmdOVkJBZ01Ca3h2Ym1SdmJqRVBNQTBHQTFVRUJ3d0dURzl1DQpaRzl1TVJFd0R3WURWUVFLREFoTmFXUnphR2x3Y3pFV01CUUdBMVVFQ3d3TlNWUWdSR1Z3WVhKMGJXVnVkREVYDQpNQlVHQTFVRUF3d09jMlZzWm5ObGNuWnBZMlZsYm1Nd0hoY05NakF3TVRBMk1Ea3dNRE0zV2hjTk1qRXdNVEExDQpNRGt3TURNM1dqQnpNUXN3Q1FZRFZRUUdFd0pIUWpFUE1BMEdBMVVFQ0F3R1RHOXVaRzl1TVE4d0RRWURWUVFIDQpEQVpNYjI1a2IyNHhFVEFQQmdOVkJBb01DRTFwWkhOb2FYQnpNUll3RkFZRFZRUUxEQTFKVkNCRVpYQmhjblJ0DQpaVzUwTVJjd0ZRWURWUVFEREE1elpXeG1jMlZ5ZG1salpXVnVZekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEDQpnZ0VQQURDQ0FRb0NnZ0VCQU81SnpVV3c1V29MZzFwZEptMEFqS3NDQW1aWkNtTXpiZGdxMTNUMmR5elNmYk9nDQoxcWp0NThSbTVkZXgvQUFrR014eHQ0SW5QV1dPZ2VQY21HaG9KRktUbjVvTi9kVW9DbG9WNVZVbSsvejIyS0kwDQp4YWx2dEVYZm1jejYwL3hPemFCVUFrQy9aS1ZOQUtpcEpoMlRDS1NESXlCZk1jRWxXcHRtMVNpTnliWS9iKy9SDQpHV3E3cHIxSVUveG9vNXMvelNCRGprUGwrUGdzTzFWSDlaaWVjVlNhWGNsbjZIbmc1aWYxUzlZckQ2c3dhcUlMDQpKM25uMGx0SXIxZkxFMS85b2lucWtqOXhna0s1TnY4aFVOL0RyN2VzK2k2eWxCMGhZeGRqTkx1Z2JBZG1nMTlTDQppS1k2MjJhZzBMQmZqbjJ4ZzM4MkNxM3BHMk96SS8yMHpEcTRFTXNDQXdFQUFhTlRNRkV3SFFZRFZSME9CQllFDQpGT2U1NlByR1VReUtncXdRMU5qK1NqU2hha20xTUI4R0ExVWRJd1FZTUJhQUZPZTU2UHJHVVF5S2dxd1ExTmorDQpTalNoYWttMU1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFNb1RtSmFMDQo0R00yQUxOTjNlYWJRbU5IdGkreFAzczNHM3k1eUQrUjFiTVhkUXBSTHNpWE5PcFkxSHJ0c1RWcER0MDRSc1JnDQpvcW55Zklzdm9YUWhibGRyR1pwazQ4MkN4Tk0xcWxoSjE2YVczTlRIbUxsMmhyTHYrbk1mWkdLZzV1eCtkdnh4DQpSQzZmb1BUYzlPY21nVGh1d3hTOUJIM0ZSVm5OTXgrekh5VEZ4QjZWWkFmc1Q3MzYyNzJmZzBGbytKZE4xSHRhDQprL01sNVVkWE8xWnE2dGh3V3RzSlh5bUtJOHFoWVI4dk1LMDJTSUpqTW96M0dhaWNsS2RCcDljNGRLOXNYVXdBDQorNlpKVjVaemxkQWpyUW5uL05lV3pVR3I1SzhyMExQUU4vYmI2UmdhWGhUNFNsazNWU1RUa2VZR1d6eE5lZGxZDQpCSFlaSXlRTGFhVTZmNjA9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_cert_selfserviceencKey","forgerock_am_cert_selfserviceencKey",Secret.fromString("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tDQpNSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUR1U2MxRnNPVnFDNE5hDQpYU1p0QUl5ckFnSm1XUXBqTTIzWUt0ZDA5bmNzMG4yem9OYW83ZWZFWnVYWHNmd0FKQmpNY2JlQ0p6MWxqb0hqDQozSmhvYUNSU2s1K2FEZjNWS0FwYUZlVlZKdnY4OXRpaU5NV3BiN1JGMzVuTSt0UDhUczJnVkFKQXYyU2xUUUNvDQpxU1lka3dpa2d5TWdYekhCSlZxYlp0VW9qY20yUDIvdjBSbHF1NmE5U0ZQOGFLT2JQODBnUTQ1RDVmajRMRHRWDQpSL1dZbm5GVW1sM0paK2g1NE9ZbjlVdldLdytyTUdxaUN5ZDU1OUpiU0s5WHl4TmYvYUlwNnBJL2NZSkN1VGIvDQpJVkRmdzYrM3JQb3VzcFFkSVdNWFl6UzdvR3dIWm9OZlVvaW1PdHRtb05Dd1g0NTlzWU4vTmdxdDZSdGpzeVA5DQp0TXc2dUJETEFnTUJBQUVDZ2dFQU1LdXVXOCszN0NNUjMwRXJlaFFrcDBFdjBFdmJqVXVSNGhkT0RydlF0N3orDQpvOVAwUkdqamNBQThiZ1FTbnN6QXEvR0dNL1ZqMnZ4eWwySVZWeTMrVFVlTno5K1B1eHdFa1VYcm82cmt5VlI2DQpCeGVVVC9sYTd2S3U3V2xHSjBESlN6Z2RoYkFTRkpsWHl4dFJoN1RpalFla0F4YXVpTzdpUk4rS0psQmZwUE9IDQpNVWZndFF0eUFVYjVhMWk1RkY4YXZqM2Ryc2xHMzQ5eUt6REphZlNiRFRHT0hwWG5kWVJRV2lHWHlraVJ1N3lYDQpZREZpK2w4eVlBdC9seWVNZU1sT1JrUW9nUE55OSs3MkZxVVdpOU5OOENnKzhxRFM0TmNuOEY4c0lOOVB4bFprDQpWS0o1L3RhVzYveFZzbS9Ba0hoODBIZ3hXaFFia0RCZ01mM3BPU3RaZ1FLQmdRRDlsbWVCRklKc3pJRHYxMVhYDQp4ZnRJQ2FKQU1uY2Rrc21Pb2VDUzRmN2p3T1Jyd0YvdExaTUZ5NmxtSXcra0l1SjZucUdyTkhTVVVnaUJxeVhoDQp2SDczSGNQbzBYelduTDFENWlYdlZsVXM0YkRYbStCd2VkbXVEOUYza204QjcrS3M3NWNheVBoN2pKVXA1bXF6DQpWSXk4U0dWZnZ3ZDZwK1YzQmpXUzZaN1RZUUtCZ1FEd2ppTWtDdDdKS3o0a0NKTkVKS3M4TXM3U2xvOGxSdVViDQp6VDNwaHMvTnpQNzV6QS9jTEswN3hGV20rVWw0cnlpOUF6VExWaCtUNFpiSDYzZHF4ckFrVjh5U0p5aHNQbFM1DQpsQ2pDZXZuNG5WV3hZTlY1N3d6eElLMTF0Z2xIYUNQNUc4eHdHSWl1Tm5nWDRFM3JMc2pObnlPT2VJTGtZK2lZDQpkVlY0bVJ3L3F3S0JnSE9rNW5qUUlKWjdRSVdmL3U3U3c4QmJYRm5JYWRmYnUvMUd4MEpVdThlampNZXl5RXhDDQpUMTBDUHJOc1k5S25jZjhYWG9UVC9DSXpzdHRuY0hRY1lRNVN6YWZiK1FGcUkwbldxQkFZbitsQzEwSE1QVE10DQo3bDVacWwzTU1zR0FZekFZWnlGNDZ4QjAwUVYxcGMwNFRxSUNwZkJmRG9zYURDUVdlZElRcGpTaEFvR0FPSDQ0DQo5SHIxRFN0eG9ZYStCdy9SZ3dhdm1iY3dFT0lRWmpJU0t5aTAzckVZNUZNdkdsY0hxL1NVNU96QWUyNHZWQXhQDQp0cjBZRjJPd1JHMGhFMXRyL0d6K0p3aTVMb3FJM1RoVlJpOFpTM0N2c2tONmZ2Tk1COGpUMDhRWGM4U2FSaU5vDQpKSjh1WWpONmlxanJ3Nkt1RjlRYXhwZTRyYWhrOUlFQnZKdkFqWmNDZ1lFQTYzV3NBeUlmcVYzNmZoN2Jvaml3DQpLd1dWUnYrUkRUeGZlcEVCMG9zSXkzaVhWUXdsRHpnVk5yVS9tbGx4VkdlbmYzNlQyTFZYYWhHQXh1NVN0VEZaDQpGNWcrdXgwTWpUVnNhYTllZEtvZFFCM283Vklldk1JZXc3VVhXWXpRREx5SjlLNkkyRVpZeXhQK29mb1dXQ2V5DQppc0I0YzFVWENCN3luS0N1aUFVZzJwRT0NCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0="))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_certificate","forgerock_am_certificate",Secret.fromString("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFTERDQ0F4U2dBd0lCQWdJVWNybkJxNzFXN3pBSFg0U0cvK2MrS3lWVVl0a3dEUVlKS29aSWh2Y05BUUVMDQpCUUF3Z1pNeEN6QUpCZ05WQkFZVEFsVkxNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2DQpibVJ2YmpFUk1BOEdBMVVFQ2d3SVRXbGtjMmhwY0hNeEVUQVBCZ05WQkFzTUNFMXBaSE5vYVhCek1TQXdIZ1lKDQpLb1pJaHZjTkFRa0JGaEZoWkcxcGJrQk5hV1J6YUdsd2N5NXBiekVhTUJnR0ExVUVBd3dSWVcwdVpESndiM0owDQpZV3d1WTI4dWRXc3dIaGNOTWpJd01URTRNVFF4T0RRM1doY05Nak13TVRFNE1UUXhPRFEzV2pDQmt6RUxNQWtHDQpBMVVFQmhNQ1ZVc3hEekFOQmdOVkJBZ01Ca3h2Ym1SdmJqRVBNQTBHQTFVRUJ3d0dURzl1Wkc5dU1SRXdEd1lEDQpWUVFLREFoTmFXUnphR2x3Y3pFUk1BOEdBMVVFQ3d3SVRXbGtjMmhwY0hNeElEQWVCZ2txaGtpRzl3MEJDUUVXDQpFV0ZrYldsdVFFMXBaSE5vYVhCekxtbHZNUm93R0FZRFZRUUREQkZoYlM1a01uQnZjblJoYkM1amJ5NTFhekNDDQpBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUxMZG1kMjlKV1dkN2QrdWV3c2xQZnZUDQpteG9vOWEwSGFQS0ZWSjdFb1BIRTcyVExMT003QlVtS0JxQ3hMSml1MzlBU09HNmRkd3RnTUVjQzBQMjl1V3F1DQp3cXdVa0xmWlJFalkyUkxMNGRGUSs0UUNhMVFNczNNSEkyZzFMZVovTldLSWRiNi94em1uWW9rNk9JYW8xcW5MDQpyVE1BVUM1ZW9PczFWdEJDdUYzc0lxOE80eStJQ2RrcWUwL3kzaTRteVdSbWNQM0M5L01HWXYvWlA1UUJWU1R1DQpzZHJibzdYRWs1eDJyVStERmxMN2ppSE52UkZBditvR25XQy8rdkE1MXBRL0p4dFphKzZ0Q0VHTUg1YmFlYjlsDQpySjUyOVU0R2ZsUk9WeDJ2VFQ0Y256UFV6NFNkT0s2SWtyN1Z2STl0d2RwV21JWWgrOXhHYUhuQWVGZ3dhZFVDDQpBd0VBQWFOMk1IUXdjZ1lEVlIwUkJHc3dhWUlPWkRKd2IzSjBZV3d1WTI4dWRXdUNFV0Z0TG1ReWNHOXlkR0ZzDQpMbU52TG5WcmdoTXFMbUZ0TG1ReWNHOXlkR0ZzTG1OdkxuVnJnaEFxTG1ReWNHOXlkR0ZzTG1OdkxuVnJnaDBxDQpMbVYxTFhkbGMzUXRNaTVsYkdJdVlXMWhlbTl1WVhkekxtTnZiVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBDQpGVVVFZ2V6ZEIzOFI4cHE4S05IWkExaVZ0OFk0SHZtWUEvVnJ0Y3J6QXN3N2lvMzVnZ2YwUWlvSVN0L3I2eldJDQpTdkM2UFZiMG05Z3N5MDlSMWNMUzhqdllTZ25VbWRtNnlTckxpVnlTMWh5cWRYbFhyTmRCM0xsZmkvbDZGdU0xDQpSZnpzQzJ4ajFjTlJPak1nWlhhaC9WWEROeGtUNXg1cW5sTXpsTFNGblhnSVFwbTNmSDhCM3NTTWJZVUtIeHUxDQpvZ0JpUDFFRWJLejRsWUYvSFRxTFNnR1RGZitwSmNGZEtQc0JEK3hmMGhCcXI3bGdPZEpKY3NxTHlJeGkxQSt4DQpYM3N4aWtzVGpYOGp4ZFpkVmlOeXdZRS9tTjdjTnM2Qk1mVHd4REJScUlXMGZCVTVhQmZqemtXUERPUmpBc21CDQpRUXdRS0tMWDFJekRJOEJnUFV1UUZnPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0="))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_certificateKey","forgerock_am_certificateKey",Secret.fromString("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tDQpNSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUN5M1puZHZTVmxuZTNmDQpybnNMSlQzNzA1c2FLUFd0QjJqeWhWU2V4S0R4eE85a3l5empPd1ZKaWdhZ3NTeVlydC9RRWpodW5YY0xZREJIDQpBdEQ5dmJscXJzS3NGSkMzMlVSSTJOa1N5K0hSVVB1RUFtdFVETE56QnlOb05TM21melZpaUhXK3Y4YzVwMktKDQpPamlHcU5hcHk2MHpBRkF1WHFEck5WYlFRcmhkN0NLdkR1TXZpQW5aS250UDh0NHVKc2xrWm5EOXd2ZnpCbUwvDQoyVCtVQVZVazdySGEyNk8xeEpPY2RxMVBneFpTKzQ0aHpiMFJRTC9xQnAxZ3YvcndPZGFVUHljYldXdnVyUWhCDQpqQitXMm5tL1pheWVkdlZPQm41VVRsY2RyMDArSEo4ejFNK0VuVGl1aUpLKzFieVBiY0hhVnBpR0lmdmNSbWg1DQp3SGhZTUduVkFnTUJBQUVDZ2dFQkFLOUI4UnpTMDR6UkJSNHlJWUFYT3JmQWJHNWlpZTdEbnZKYThFSXRHaUlyDQpQQUpBRGppTVFTOEFYbVFmbGpuNHgzWmlGQWRXcFNseFUzeVE1dVJwZlA5cVEzZEhJMUh4UWpZNnU5L3VBOU1NDQpEWllZcEwrVFBsWE1QY1pDclRuM2xRQjZBeDBuWG5kQWFvMVpqYjlzT2dIZmYxTEUwTXZPanRCSTBFcDV4WnJJDQpPMm4xWFVIMlFyNG02TkpIUk1tTWdVeVdBOVkzVkRKNXRGMTZxcldsMXE4SVZORlp4U0lEY0VUK1RHZlI2eDJiDQozSEJpa2FoUW95Z2NYYjJSVFFMMlhhbEVoQVZ2OSt1eG82cWhoV3pYazVDNVhoUXVZVzlZaHhZZjMvVDh2MXJYDQp3Y1NyQ0oxcVFZcHlNenZXLzErcVY5bGRaVHJlcmZDQWpmMHMxVTZIeTlVQ2dZRUE2ZEVvRnBibHoyMHlscHFoDQp5TUsrMUFON3R6SW91aFJxUCtHdWpFcFZOMktpanVVVVN4akVwRy9SNDVNVEUvOEtueW1LYkkzdlh2WE9EdVpCDQpZdy81NGwxanB5Z21CeTYwY2RRREh3enBON2cxd0hsVFVGclZaWllTbU45MnFVV05QNGRvUEtmS3FRamozZ1ZoDQpNM0g4M2JvMUVHWFprLzdQOVY4K1ZvVXZ1dmNDZ1lFQXc5WFBRL0VtZUJuVVpJdkt1QUtVd0t6ZVZXMTFSclZxDQpyQWQzaUpIdGFtSFFQOVVWQ2duQmtBdFRTczVYRUsxMTVBQnJaVXVzOWcvazFKWlZNN1lmTUlWcXM1ckxOY243DQpzUlhTTWl5MUpuU2JuaEN2cE1CeFFtYUtSV0NzdUorSjVjNGp2OHM1NCtLZm9kMFhNRGNLUlJHcXBoT1E0QUk5DQp2UGowS2NLVzRwTUNnWUJ1SWJObE9IeFVnSlhFZEY5aDVjRG1zaUZTdjlDSkhWYVNjbVc1OU1WQXlqZlJZTHQzDQpSOXBQcmMvS0JwdUUzcXVOSG83eDVNVHNFSkdYV1FOUmV0UHp1Sk5ZeDhOcHZLa0h1Sm9qeFB3UTM3YUp5MXZmDQp6SGtaV1YrM0hBS1Rab3hLY1NnNjhibTJkdGFGM0RqVmQ0cG9rZTJ1cEpxZ1ovUmlHaE9Od3p3aEx3S0JnRTRsDQplOWY0MndrQ0JhYzV3V004WkcrZWkvbzYrNW1EdTFWNmhWQ1NLdE5ReFBFejdubGErMHFudWswWG1kYWw0VzFpDQpYWGpHZ2ZhTzBSbWtBOHZtMlB0YndnQjV2SzF5TkdXdDkzcmVMRXQwTE1VZWszaUM4cTgwaStpemN6a1pNTVhyDQpSSWk4YUJWdjBaT2R6aXNIUzZuVUt1eXEwaDBSeCtFbzF3WHpDSkxSQW9HQVRHOFhlZkppTlpCTFRWVnR4ZWNEDQptcU10Q2xsVGF2aUl3Q3E4ZFF0REdaVXJhcmFaU0VEb2Q2aTNyNXMvRFlMaEt0K1N3Um12U0o1cjFCZnUycnBmDQozcHQ4ZXZKMlhOb3ZTWmMrTmRtVm9tR01SeWZRZjhZOFo1ZFY5enFwekNPODhxWmhWakZPdW84WmVTc2dFOUd4DQpCWHVELzY2Tno3a0Niamx5MXZ3blltYz0NCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0="))
    theStore.addCredentials(theDomain, secretText)
}

def creatReplServerSecrets(theDomain,theStore){
    println "Creating Replication Server Secrets"
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_rs_keystorePwd","forgerock_rs_keystorePwd",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_rs_deploymentKey","forgerock_rs_deploymentKey",Secret.fromString("AKZhCazflwQbguAahZcMZAdvBFRL3Q5CBVN1bkVDAI5DbswB0crEt4k"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_rs_monitorUserPassword","forgerock_rs_monitorUserPassword",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_rs_rootUserPassword","forgerock_rs_rootUserPassword",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_rs_truststorePwd","forgerock_rs_truststorePwd",Secret.fromString("changeit"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_rs_certificate","forgerock_rs_certificate",Secret.fromString("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGQVRDQ0ErbWdBd0lCQWdJVUVyd1cvSktIRTZFS2NjNnBqMkVPN2tsTkM0VXdEUVlKS29aSWh2Y05BUUVMDQpCUUF3Z2JVeEN6QUpCZ05WQkFZVEFsVkxNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2DQpibVJ2YmpFUk1BOEdBMVVFQ2d3SVRXbGtjMmhwY0hNeEVUQVBCZ05WQkFzTUNFMXBaSE5vYVhCek1TQXdIZ1lKDQpLb1pJaHZjTkFRa0JGaEZoWkcxcGJrQk5hV1J6YUdsd2N5NXBiekU4TURvR0ExVUVBd3d6S2k1bWIzSm5aWEp2DQpZMnN0Y21Wd2JDMXpaWEoyWlhJdVptOXlaMlZ5YjJOckxuTjJZeTVqYkhWemRHVnlMbXh2WTJGc01CNFhEVEl5DQpNREV4T0RFME1UZzBPRm9YRFRJek1ERXhPREUwTVRnME9Gb3dnYlV4Q3pBSkJnTlZCQVlUQWxWTE1ROHdEUVlEDQpWUVFJREFaTWIyNWtiMjR4RHpBTkJnTlZCQWNNQmt4dmJtUnZiakVSTUE4R0ExVUVDZ3dJVFdsa2MyaHBjSE14DQpFVEFQQmdOVkJBc01DRTFwWkhOb2FYQnpNU0F3SGdZSktvWklodmNOQVFrQkZoRmhaRzFwYmtCTmFXUnphR2x3DQpjeTVwYnpFOE1Eb0dBMVVFQXd3ektpNW1iM0puWlhKdlkyc3RjbVZ3YkMxelpYSjJaWEl1Wm05eVoyVnliMk5yDQpMbk4yWXk1amJIVnpkR1Z5TG14dlkyRnNNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDDQpBUUVBdk1ydEdnYmFNSzlTZDk3VUE4S0JqcFJzU1haMXoyU05IcE9aUmduL3NPdDlJaU5mZFhZcU1OVWFRNEhQDQpjYU9DOXk0dCtqQ0lJZTRZOE55dmVRZitqSmJscDRObXlYZmdCVHpRa3U2QlhpanpSV0RPSFB1MGMxOVVvTys5DQp4YXFnQVlFYnpBckpteWY1ck5aRExIZXQ3WGx6bGFLRHZUVXduaVBmaGNYWW1GYm9iOVNndUxpUFBucVJvOXduDQpOelhBcFZaWmVLU01Ua2UrMFA0Qk1oK3FtWFhjOXY1b2dUMG9aWGJra2txVExmR3BJK0V6Z201emhEbDRqSjE2DQp2MVlCaEY1TnR5WlBKcFE5N1ozVHlYMWg1cC92cGdJRHBwelRUUUd5Tk82dys2L3QyY3AzbGRxUHlNM1JHbTJQDQpBVlZVckFvZVlFT2YzZ3pObWhFeWVacVFmd0lEQVFBQm80SUJCVENDQVFFd2dmNEdBMVVkRVFTQjlqQ0I4NEl4DQpabTl5WjJWeWIyTnJMWEpsY0d3dGMyVnlkbVZ5TG1admNtZGxjbTlqYXk1emRtTXVZMngxYzNSbGNpNXNiMk5oDQpiSUl6S2k1bWIzSm5aWEp2WTJzdGNtVndiQzF6WlhKMlpYSXVabTl5WjJWeWIyTnJMbk4yWXk1amJIVnpkR1Z5DQpMbXh2WTJGc2dqVXFMaW91Wm05eVoyVnliMk5yTFhKbGNHd3RjMlZ5ZG1WeUxtWnZjbWRsY205amF5NXpkbU11DQpZMngxYzNSbGNpNXNiMk5oYklJektpNW1iM0puWlhKdlkyc3RjbVZ3YkMxelpYSjJaWEl1Wm05eVoyVnliMk5yDQpMbk4yWXk1amJIVnpkR1Z5TG14dlkyRnNnaDBxTG1WMUxYZGxjM1F0TWk1bGJHSXVZVzFoZW05dVlYZHpMbU52DQpiVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBRis2QmVwQy8vWk9IYmtiSzF0bHJXVnRoZVZ0dVpuTEoydXVIDQp0M092WGtZTTZmM0VQaldGb2NjVU12Qjg1akZpUHRWb0lhcURkRFRqVWtXdy9XK0Rpa3RIclh2Ui9PcHNZK2dYDQpYd0dUOE9lYVFhWWhpeG5jQi9DOS9MeUxuOUdmVSs1cWhDMVhFQThaaUZkTGRsM0RGZHl1ZVRyTWJJdmlXOXFIDQp3THVaRWQ5Rys0MnNVSlVRajNQMWw1aEZNZUduc3VLUzNSLzhJNGZBbDVBc0VmeUxMOFlLOE9GQXpoclI2dTdnDQpCcVVDb3BUZ21zQXJHVzFML0w2Vk9NQWp5eFpTSVdPaHZEYWxYNFh4eWVBU3hrM1NzS1dHSXovcXJQZzQ0ajI4DQpNWVEzdE9vYmpNMUZpQlNYRnRWQnV3RHcwWEQrN3IwN0h3VjJVVjFQZzYxellQSVVrQT09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_rs_certificateKey","forgerock_rs_certificateKey",Secret.fromString("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tDQpNSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUUM4eXUwYUJ0b3dyMUozDQozdFFEd29HT2xHeEpkblhQWkkwZWs1bEdDZit3NjMwaUkxOTFkaW93MVJwRGdjOXhvNEwzTGkzNk1JZ2g3aGp3DQozSzk1Qi82TWx1V25nMmJKZCtBRlBOQ1M3b0ZlS1BORllNNGMrN1J6WDFTZzc3M0ZxcUFCZ1J2TUNzbWJKL21zDQoxa01zZDYzdGVYT1Zvb085TlRDZUk5K0Z4ZGlZVnVodjFLQzR1STgrZXBHajNDYzNOY0NsVmxsNHBJeE9SNzdRDQovZ0V5SDZxWmRkejIvbWlCUFNobGR1U1NTcE10OGFrajRUT0Nibk9FT1hpTW5YcS9WZ0dFWGsyM0prOG1sRDN0DQpuZFBKZldIbW4rK21BZ09tbk5OTkFiSTA3ckQ3ciszWnluZVYyby9JemRFYWJZOEJWVlNzQ2g1Z1E1L2VETTJhDQpFVEo1bXBCL0FnTUJBQUVDZ2dFQkFMYjVRYlRRNFZVQUJzQndzVEQzcVpNalhKUVNnSG5CYlZndUd3WWJtTG5DDQpjaVBNL3E2Y0dLWDlVNWdMenA3SHA1MmpIeUoxT09zUmxSQ1VBbWtlQzJIOHVaV1JyK1FoRDNoa0NZM3VKR202DQo3SlBZRDh0ZFUvWGhkZWNJay9kb3QremRVYkIrNEFoRlJTRnpBK1dzRkdDdExnM2ZWU2ppelR6bmJiSjhIc0Q5DQpCOXZJTFVBa0lYZkFJY3paOW5pOVBCenk3VXNTQXVXTkhpTG8yMit6OFNuVHZRMzB6bE5aQVQ4enNtWFZFcFpJDQp6Ynp1VnprNzJVZUgyci9ENmdiZHo3Z2E5VEVKcmMxK0xRaTQ5LzVGYmt2cXhrWlM3QUNqc0JmOEcybTVQT0huDQpoSmpZNTY2OWIrYmF0aUl6enR6eFNNQktxKyt6K0pWbkxSR3gvazh6RGNrQ2dZRUEzb0xkZFFvUFM5alFSK3hSDQpLMGp3d0h2QWRtNGwwVk9TMFFiNUR5dnBiRFlTTGsxa0dvTDl1TVpBR2p6eDNWSG9GL0JpR1lhRzV3WXNIMHRyDQpmZDlhYjIvVzhjaHdLdnZKdU90Zkd1blpBWjdWSndXVlc4R1ZKdG1zdXNWRVBGUHFkOTQ0MCtES2VRYWhxdDQ0DQorYXg3NEVxRW1pWVRUZUI2QWhEc1ZtSXlWZlVDZ1lFQTJUVHJuNVJrdHl2YzBLalFERXVobkxZT3RiSGRiTmZvDQpkNUdmS095aUltMFhTMVNBUldSQm5qeWxlS1NMM2VWd1VwVG1OZ1o3Nmhqb2hZZkQ0OFUxay91ZU4rdXpoN3ZmDQp4Uk9oMk80NStZNUlxVEZxKzEzSld6MHFrN2x2bS9GN1pWb0tOQWVtVHRwSHFrR0FhVXpXSEZCaTlHdW1nTWN6DQpOVEdSR2NDRGtDTUNnWUJaS2l2QU9OWEVXUSt0b3A4c0wwQjZnWnl3V0pkQytMQituc0t6TjYrRU0yNjVxejJQDQoraW5lSDJPVW9CTnowdHlrcXlsRWZVb1Z6YjFrbFA1d0pFN0RGUmdYTDNEemFJNS9VYUo4MEhTclY1Q200Ry9uDQpvdjAzNGtaN1dZMXNkMXdmeUtjUkVLVlNOandXa3BKV1NxNGhSUHM2SWtQZUV6UVJHK0w1QXNTVStRS0JnUURWDQpxc1ppdStKN2dlMTlZYU1QaFZMY3l3Y2JXM1c3ZllVVUlpOFVYZnQ4ckIzdkg1ZnpLeFdWcUlrS2JhdWRRL2ZEDQpkUEFsa3lsUWR1STlnUG1GVlZsSVVvd283SGMxL2UyNWUzK0oyNGN5WS9JOFpmMmNlbno2Z09naVc1ZGNLeWU4DQo0dDhJb2NISzdkVHp1ZTJ0S0VXem9xeEZUcVNESi9ISzBSQ3c2WDFDU3dLQmdEZmJSQVNXK0xSYitYUkM0eFJUDQpsMGQzYlY5RS9qcG9LL3I3N0wrRWh2amk0U0JIbTdKMDJBUUdxb2ZtZ2lpSjRMSlZ5ZzdTZ3lTU3YwaHRseHFFDQpWWnJiU0hUR2lEUUJvRjYrSlJoOXl1ZjIvYk9QNTNLVXJFN2J3OGhHRm1ITHZPaWMxdmQrMURXVVhxTDZOeDVqDQo4MSt3bHRrZCtMTVdER2czKyt6QVFwZGUNCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0="))
    theStore.addCredentials(theDomain, secretText)
}

def createUserStoreSecrets(theDomain,theStore){
    println "Creating User Store Secrets"
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_us_amIdentityStoreAdminPassword","forgerock_us_amIdentityStoreAdminPassword",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_us_deploymentKey","forgerock_us_deploymentKey",Secret.fromString("AKZhCazflwQbguAahZcMZAdvBFRL3Q5CBVN1bkVDAI5DbswB0crEt4k"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_us_monitorUserPassword","forgerock_us_monitorUserPassword",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_us_rootUserPassword","forgerock_us_rootUserPassword",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_us_truststorePwd","forgerock_us_truststorePwd",Secret.fromString("changeit"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_us_userStoreCertPwd","forgerock_us_userStoreCertPwd",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_us_certificate","forgerock_us_certificate",Secret.fromString("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFK2pDQ0ErS2dBd0lCQWdJVVJ6UHZxaERPU05NRG42Um9ObGxsQWZMYkxhc3dEUVlKS29aSWh2Y05BUUVMDQpCUUF3Z2JReEN6QUpCZ05WQkFZVEFsVkxNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2DQpibVJ2YmpFUk1BOEdBMVVFQ2d3SVRXbGtjMmhwY0hNeEVUQVBCZ05WQkFzTUNFMXBaSE5vYVhCek1TQXdIZ1lKDQpLb1pJaHZjTkFRa0JGaEZoWkcxcGJrQk5hV1J6YUdsd2N5NXBiekU3TURrR0ExVUVBd3d5S2k1bWIzSm5aWEp2DQpZMnN0ZFhObGNpMXpkRzl5WlM1bWIzSm5aWEp2WTJzdWMzWmpMbU5zZFhOMFpYSXViRzlqWVd3d0hoY05Nakl3DQpNVEU0TVRReE9EUTVXaGNOTWpNd01URTRNVFF4T0RRNVdqQ0J0REVMTUFrR0ExVUVCaE1DVlVzeER6QU5CZ05WDQpCQWdNQmt4dmJtUnZiakVQTUEwR0ExVUVCd3dHVEc5dVpHOXVNUkV3RHdZRFZRUUtEQWhOYVdSemFHbHdjekVSDQpNQThHQTFVRUN3d0lUV2xrYzJocGNITXhJREFlQmdrcWhraUc5dzBCQ1FFV0VXRmtiV2x1UUUxcFpITm9hWEJ6DQpMbWx2TVRzd09RWURWUVFERERJcUxtWnZjbWRsY205amF5MTFjMlZ5TFhOMGIzSmxMbVp2Y21kbGNtOWpheTV6DQpkbU11WTJ4MWMzUmxjaTVzYjJOaGJEQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCDQpBTUdFbFJEUk5jSURLVEIrcEVaTXp0dXlOS0x1WkdKekF2NUVDSE1GNmMwQ2hwYU81RXFHZmM3bi9ReDdOeENPDQpOVHp2TGxqMDJhVGdvaDRicXdtT0lFbHd3clk2S0ZOZkZyQ2Y3YWlmZFlyZnhxSG9DektiekVtOWVIbzQ1Qy9YDQo0UW1sWUoxY2pMci9UTkk0TVJhREpGZStjeXlFTzREWEhIKy9sV0E2ZlNUMXRjZzJGOXpKZEtxQ0lvcGtCUE5uDQp6VjZSS1doZ1hLQTVtYVpYMDcxdVNyUGlMUUdYSjJMVWQrWWhpVzlnWDR5QTNaRHFpZyswdWtnejVLQUNpUE0rDQpRVEVKbytUeXRpVVdJRUkxOGZmSGYxemlVZzZ5bjdpWllEQXV1RzNIQ2NhVkp5ZEJ2SHBFYlpUWFdwZ3QvMk9sDQo0SDI5NnFiWWE5alJhZjkzelcxV3paa0NBd0VBQWFPQ0FRQXdnZjB3Z2ZvR0ExVWRFUVNCOGpDQjc0SXdabTl5DQpaMlZ5YjJOckxYVnpaWEl0YzNSdmNtVXVabTl5WjJWeWIyTnJMbk4yWXk1amJIVnpkR1Z5TG14dlkyRnNnaklxDQpMbVp2Y21kbGNtOWpheTExYzJWeUxYTjBiM0psTG1admNtZGxjbTlqYXk1emRtTXVZMngxYzNSbGNpNXNiMk5oDQpiSUkwS2k0cUxtWnZjbWRsY205amF5MTFjMlZ5TFhOMGIzSmxMbVp2Y21kbGNtOWpheTV6ZG1NdVkyeDFjM1JsDQpjaTVzYjJOaGJJSXlLaTVtYjNKblpYSnZZMnN0ZFhObGNpMXpkRzl5WlM1bWIzSm5aWEp2WTJzdWMzWmpMbU5zDQpkWE4wWlhJdWJHOWpZV3lDSFNvdVpYVXRkMlZ6ZEMweUxtVnNZaTVoYldGNmIyNWhkM011WTI5dE1BMEdDU3FHDQpTSWIzRFFFQkN3VUFBNElCQVFDMm9qUW5PK3d0S1BnNTErQkFUUE9JdEEvUENaZ1QyYkJZV3I5RldNRldBWEtiDQpLbFdzSVBlNWV2ek9ZdE10ZmFTcWlTWWkxLys4NUFncnlOTWFCaXhpMjZ2SThSK3IyNzlIM3ZPWWdqL2V4VVVSDQpydkhWMEtwcHJzTGtJV3B2THRkbEMrcWRSeEZCQlI1Snowb29UZzRYS1RZeDFrL3RPU1N3VDc1SkxKMTZ5Z1FQDQpnZC9VdmxhRVBIdm5FMU5YVHBvaTFVdVJtT2tTZjV5aDRSUTB3ZFlxd3BBYWdJVjI4L3RWZDZ1eXE2aTlRajBUDQphbHJkWERvN2ZPUUxpOHFLZ1dGU3RQalNHa0hNZmdNc0RuNmI0N0FSWlhiZDAwYmI0YTNDaVNFU1VuWEJTRTFwDQpYZE5HWHBOQ0tpQ3ZLTEhVRU5LMW5leG5DWFh4WGhuZXZSalV3Uy8yDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t"))
    theStore.addCredentials(theDomain, secretText)
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_us_certificateKey","forgerock_us_certificateKey",Secret.fromString("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tDQpNSUlFd0FJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLb3dnZ1NtQWdFQUFvSUJBUURCaEpVUTBUWENBeWt3DQpmcVJHVE03YnNqU2k3bVJpY3dMK1JBaHpCZW5OQW9hV2p1UktobjNPNS8wTWV6Y1FqalU4N3k1WTlObWs0S0llDQpHNnNKamlCSmNNSzJPaWhUWHhhd24rMm9uM1dLMzhhaDZBc3ltOHhKdlhoNk9PUXYxK0VKcFdDZFhJeTYvMHpTDQpPREVXZ3lSWHZuTXNoRHVBMXh4L3Y1VmdPbjBrOWJYSU5oZmN5WFNxZ2lLS1pBVHpaODFla1Nsb1lGeWdPWm1tDQpWOU85YmtxejRpMEJseWRpMUhmbUlZbHZZRitNZ04yUTZvb1B0THBJTStTZ0FvanpQa0V4Q2FQazhyWWxGaUJDDQpOZkgzeDM5YzRsSU9zcCs0bVdBd0xyaHR4d25HbFNjblFieDZSRzJVMTFxWUxmOWpwZUI5dmVxbTJHdlkwV24vDQpkODF0VnMyWkFnTUJBQUVDZ2dFQkFLOTZya0dGdEoydGlCZzFmbmxSQlBNcmNaZWRYT0g1TU9tb2Y1RHQ5OGl6DQpWYUFKQ3ZLWmFsUEpBaW5qUVZkOTNNRFlrc3FQblJ4cHBoaHZOblYvcjc5b3hPZkJiUGZNN2lKVG80cVlybG16DQorY2F2U0Jnb051TlhNSHlFUWtjd0Z4eE1Ib1FUZkhuRkw4QWd2RUtSd003Z0lFaHAwQnRROU1MUzAzMWpERUFLDQpDS1VMQzZMMDA2TmhidVVUemZiaGJSV3lRbkpKRjYvTHV2WmNaeUpRTG8xVGhJSy9YMFh1a3BOalNIY3hSaENKDQplcmVXQ0NvR251WktLZ0dRc0p3TG5QMmdNWFBXV0p3dFozNldPSFQ5eXdBTkwvMUlFcVljd0RNR0hTeHhtRHB6DQpiV0xKT1pLZ2tDb0EwRUNJeFAybXo3aUc2QjFrNU0yRXhUM0tEdVpXdVJFQ2dZRUEreURhUlhwU1Vad3RKQ2RaDQpoTjVOQkwxMis5c2VBMWxMTjBvOEYzVFM4TEk1eHllR0N4UDl1a05CRHFseTl4eGtIMFBDTEV6UlZmeWhjNVVlDQpjaFhIalcrT1JXZ3BCV25ZeGRTNEwxcmRWdVhhWG4wNmFIaFY3bjFDQ1FLT2lZTHlJRXNqbVlRNVJOV3JiK0JLDQpyUENWWnNHd1dMbk1ZR1FaUHJkdzBIZXB4WHNDZ1lFQXhVV2dTMnhmQlFudStnMFUzRGpQUzQzQk5za0VubmtCDQp2V3FSWFZqQlV5akh4SGx2cnJhdWhZWWNSWVRXc1RKRnZTMUNqdkFvdmdldGRWbjRKMnU5RVova3lydG42NHdFDQpxalQ3endGZzZlaWlRUmpJcXRnTnFBdlg2ODFmbUZwVTJjcVpqMm5LdEJVUVJNdTd6aElzK0RabUIrZW1RSTBnDQovWHpjUUorMEt2c0NnWUVBbDRiakxUajVvclNScUZiMTlPNE5tdWFYZkxCaUU3TTFaMDhyb3h1aWpBbCtRMlRkDQp4S0Z6WDRobElPdXRxdDArckg2K0V1em5Bdk5FbC9GS1JaeE9wRkREajYyaDB0cGpLanVJUjBxVWMzS05xS1gzDQpNRUlyMTVOTTNSTGwzcU5jWlkveEV4aHRWZE4zZGpIbjNTSHRnK3NxOU41bksySTZ1VlVHaFVNdTlURUNnWUVBDQpvdGg3SGtmem1HRSsyVVA3T0YvZEgyMkJWZ3hTdDg4RVZLeW9HdnF0ZkV4cHZCTFMwdE1TOWo1akVEQThXa0k1DQp0NVNwSVAyM1pFZEtOVmx6dEhjSHVJalpnVkY2MDhMZUJ2Tjkrc0FVbElMcGpmczdpMnlXdVdZdGRBWXhKNzlKDQoxQStlKy9oRTBLdWlwbWZZUEtCY1p2bmcrQjJON0RPVVRDektWTDZCS0FrQ2dZRUEzSTZReHJFYVJRdFA1SlB0DQphN2kvTVFSaFQ1MmpnSE55Z3k5RDlwUUFHVHloLzFPQTRsK3hTVWxtNTh5NVBKTkhmUHVkbEIvTWgwdnBpa0RJDQpSTHhnMUZKUldiODRCbk96NmxMQnRieFFONUMzclB4SjFYOXU2bStmTTE3TmI3Z3B1THVhY2t4ZThhWGFkcjltDQpFVFRHbGsvNmR3QmlXRSswb3JwaUJvV1NReTA9DQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t"))
    theStore.addCredentials(theDomain, secretText)
    
}

def createTokenStoreSecrets(theDomain,theStore){
    println "Creating Token Store Secrets"
    secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_ts_amCtsAdminPassword","forgerock_ts_amCtsAdminPassword",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)                   
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_ts_deploymentKey","forgerock_ts_deploymentKey",Secret.fromString("AKZhCazflwQbguAahZcMZAdvBFRL3Q5CBVN1bkVDAI5DbswB0crEt4k"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_ts_monitorUserPassword","forgerock_ts_monitorUserPassword",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_ts_rootUserPassword","forgerock_ts_rootUserPassword",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_ts_truststorePwd","forgerock_ts_truststorePwd",Secret.fromString("changeit"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_ts_tokenStoreCertPwd","forgerock_ts_tokenStoreCertPwd",Secret.fromString("Midships20!9"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_ts_certificate","forgerock_ts_certificate",Secret.fromString("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGQVRDQ0ErbWdBd0lCQWdJVUdxSGNCRy9PQmhpTmQzVzRhc0doYmpiOUl3d3dEUVlKS29aSWh2Y05BUUVMDQpCUUF3Z2JVeEN6QUpCZ05WQkFZVEFsVkxNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2DQpibVJ2YmpFUk1BOEdBMVVFQ2d3SVRXbGtjMmhwY0hNeEVUQVBCZ05WQkFzTUNFMXBaSE5vYVhCek1TQXdIZ1lKDQpLb1pJaHZjTkFRa0JGaEZoWkcxcGJrQk5hV1J6YUdsd2N5NXBiekU4TURvR0ExVUVBd3d6S2k1bWIzSm5aWEp2DQpZMnN0ZEc5clpXNHRjM1J2Y21VdVptOXlaMlZ5YjJOckxuTjJZeTVqYkhWemRHVnlMbXh2WTJGc01CNFhEVEl5DQpNREV4T0RFME1UZzBPVm9YRFRJek1ERXhPREUwTVRnME9Wb3dnYlV4Q3pBSkJnTlZCQVlUQWxWTE1ROHdEUVlEDQpWUVFJREFaTWIyNWtiMjR4RHpBTkJnTlZCQWNNQmt4dmJtUnZiakVSTUE4R0ExVUVDZ3dJVFdsa2MyaHBjSE14DQpFVEFQQmdOVkJBc01DRTFwWkhOb2FYQnpNU0F3SGdZSktvWklodmNOQVFrQkZoRmhaRzFwYmtCTmFXUnphR2x3DQpjeTVwYnpFOE1Eb0dBMVVFQXd3ektpNW1iM0puWlhKdlkyc3RkRzlyWlc0dGMzUnZjbVV1Wm05eVoyVnliMk5yDQpMbk4yWXk1amJIVnpkR1Z5TG14dlkyRnNNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDDQpBUUVBdlF5d0MvNmZML0wxWXRISDd6UlZ6L01uT2NiOUUwWThzeVl2TTUySVQrK2U2K0JSRkwyaWRIdTVYdjkyDQoyZmVTM1RVRjZXT0JqOWEvREZtWFdBZW9KandxMWZKV1FHbEFKcEVrbGdvc2hQVE5pOG54TnU5eXBHcmlXUnZnDQpJSGtOWWN6cGxVMjJpWFF5blcvTmN2Vk5BcTFjb2M0UXFUUlBFNlhURDdJMGVGY1JISXRmeW5vNVhaRHNaU3BnDQpCSEgwWGc4cjNhTFJEcDlYR3R5SWdibFNPakJaWHViSmUwQmlRbUM1SHM1bmQ5STFwOXZlNmVIVitTK0xRTHlyDQpYVEVvb1pIYytVb0ljWkxBRytvTThQaDNBS3hsa3JDSUhJYWdJYjF4SEpkcER2WWowWVJmTndyeEU1M3hRTGtzDQp0L2tnR09DUkk5RHZ2RUZYL1plOUZLK21oUUlEQVFBQm80SUJCVENDQVFFd2dmNEdBMVVkRVFTQjlqQ0I4NEl4DQpabTl5WjJWeWIyTnJMWFJ2YTJWdUxYTjBiM0psTG1admNtZGxjbTlqYXk1emRtTXVZMngxYzNSbGNpNXNiMk5oDQpiSUl6S2k1bWIzSm5aWEp2WTJzdGRHOXJaVzR0YzNSdmNtVXVabTl5WjJWeWIyTnJMbk4yWXk1amJIVnpkR1Z5DQpMbXh2WTJGc2dqVXFMaW91Wm05eVoyVnliMk5yTFhSdmEyVnVMWE4wYjNKbExtWnZjbWRsY205amF5NXpkbU11DQpZMngxYzNSbGNpNXNiMk5oYklJektpNW1iM0puWlhKdlkyc3RkRzlyWlc0dGMzUnZjbVV1Wm05eVoyVnliMk5yDQpMbk4yWXk1amJIVnpkR1Z5TG14dlkyRnNnaDBxTG1WMUxYZGxjM1F0TWk1bGJHSXVZVzFoZW05dVlYZHpMbU52DQpiVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBdDZaVno5SVJXVU10ditYTjZTVkFoSmRkdjhrYzZabEoxZWJ3DQpFWC82WW04T1ZiMzZtRnlGaU5hUmdQay9LamZaWDVyT09lUDZwSkdlTStmYlJ3K3lmbkp4ZElrZnRqRUhyeTdGDQpxcDhzRmdyd3ZOckhsRHNGRE93anpNNGkzcGhha3piNDY0MUExVW5FdU9lZm03OC9ST0dNQUFOYzJudjdib1JCDQpuSnpZRjdZekl2S0NJL0xoTnNNYzU0UXI0anZzd1cwU2gwYk83UWZSQlRmZ2phalBialMybGU3ZU04M1BTTGpUDQoxWHJ3N2wxeGdOWE1mQlNJV0J4SnA5V2c3WkxldUdpQUIxMTJPRUQ2NkY4SUw1RGRTK0k5dGZydE9TazhES3B5DQp0dk5XN2dFZXZibVVJbFI5QXlJQUtzLzN0VUNxQkF1NnJMdlU3T28vZzhJa3h4L20ydz09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t"))
    theStore.addCredentials(theDomain, secretText)
	secretText = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_ts_certificateKey","forgerock_ts_certificateKey",Secret.fromString("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tDQpNSUlFdndJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLa3dnZ1NsQWdFQUFvSUJBUUM5RExBTC9wOHY4dlZpDQowY2Z2TkZYUDh5YzV4djBUUmp5ekppOHpuWWhQNzU3cjRGRVV2YUowZTdsZS8zYlo5NUxkTlFYcFk0R1AxcjhNDQpXWmRZQjZnbVBDclY4bFpBYVVBbWtTU1dDaXlFOU0yTHlmRTI3M0trYXVKWkcrQWdlUTFoek9tVlRiYUpkREtkDQpiODF5OVUwQ3JWeWh6aENwTkU4VHBkTVBzalI0VnhFY2kxL0tlamxka094bEttQUVjZlJlRHl2ZG90RU9uMWNhDQozSWlCdVZJNk1GbGU1c2w3UUdKQ1lMa2V6bWQzMGpXbjI5N3A0ZFg1TDR0QXZLdGRNU2loa2R6NVNnaHhrc0FiDQo2Z3p3K0hjQXJHV1NzSWdjaHFBaHZYRWNsMmtPOWlQUmhGODNDdkVUbmZGQXVTeTMrU0FZNEpFajBPKzhRVmY5DQpsNzBVcjZhRkFnTUJBQUVDZ2dFQkFJYTg1VGdYU0hPUE1PODJYczRRdWR4VkM2NzFNT2dzMWhSRThiMVMySlZJDQpUamNGRUNTOUoyem54VzE4bThPcjNPT0Y1K200ZnQzNml2Mk5XUDFucjZOWW5Kc1JkZ0hBUWZWNjJ0Mkk4TVB1DQpDaFZJWDMvczF3TnlIbEt1T0daTWdJb2sxcElQNmpvN005dmJsRTBMb2RCM3FKNjExRkFVTlF2bTB1L0w3Zk9aDQp0cHlDUmo3ZE1EaDFaRFdhTjRrKzFPOVl1LzRIT2tPS0MxbzRpTzcrdGhnN2Q2RUV1RHRMMFVOZXVzeGVqbFBPDQpKQjAwMFhhdFVwclUxemkxb09zRnRnOWlRK00wU3dqQmhXQkhWS0FJV1NCS082QVJNRTU2MGhJMGRyZ29SUEkrDQpxQkdiVE1DdEhINjFaSkdTQmkxaWNDZ2xJTmJjNmIyM3RHQS9Od1V2K09FQ2dZRUE5MXkzeVlGZXFXTllVcWtIDQpSYk1lZFZsQ2ZsYlJoVzhGRU1Jbm4yN3lMaGhGMTBXOGxvTU9NZlBJUHZ4b2NrbDQ5MlVEay9sa2lneHdVNW15DQpzdm9KSkhzemNYcVI1MEVCVFNjNkdzZmNsWFJHSnFVaW9oWGtnVkZZNEJTbG9SeDZiRjRqNHJqekdUbEwyRFJLDQozYWV2NENOOE9Bc3FIMjVlSzkzdmp6ck0wbjBDZ1lFQXc2YXYzV3RjSkR2RERvNlZsdHFqZjJFbTMyQVNyejRoDQpwTzBkWm1NN1RoT3d3TDJUQVljVUtCbnZ5alVjOGVnMWY0MGhtWGI3aUhFN0FWR2lJNzlWWG5CcGNMQXJ4d2xtDQpWTkY4Y0Q0NThwRndrUWNmZTBCOHYrakxyK2FSR2FWVDJudHVlMjN1WVdNMnZJaW8zZEY2bXorREVWTjJHbDkrDQpuSFp6eFZINEdxa0NnWUJCZTF6M3pmU0dPTk5YeG9FelZWQjUxakJCQzdDWmR5TkxKV3FoelJmMVZkMmZPRW5ODQpPbEpXck9kVXJUTGxGa2djamJRZHh3WnplUWwvU0EvRFMyZUNMYzhYZWxBSGZQRGdRTU1qOWNhU0ZkN0FPalRwDQozWXZKSkFTNEJSODNnRGQwV3BON1lHU1NSOVdwSFdhNE9MelpRK3VOVm45SEpNdHZKMmhVYlVkdGJRS0JnUUNrDQpvVndXYXNKcjBzVzlPQWx6bUtJL0N4YlVtMWpka09CcWtRTk9KbTIrc3g3bDhCOEZDQTdUOTQ4b2pTeS8rVzhhDQoxenpRajZmMEZhTmE1c0FTYUd1RFBmL2JUTUpwaHVWT3RiK0tDekpqaERJK05zb3N3Z1MyejBLbHp0T0Z5dklXDQpSQXFoWGMxYXNVdGJ0WHF5dkJQNUVxWk5LL2VURll2S1NIbitMWTBoa1FLQmdRQzF5VFRCVGpsT016WXh6dFZpDQpCYW13RDNyRWRzOXBIR3JuanNUWVhwbGp3VnMwdnZTUCtQQXNPVE1ZWWE0T3ltUVYzZWxEdm5FR3F5MEt2c2ovDQpNQmpuSlp2ckR3QmVEa21DRE9MOEZjUEpicGdoRWtRVDdDeTZGRW5FSlFBKzBtS0p5ZzhHREorNVlacVgrSDlZDQptaXZpT2N2eDRoSHNRTzhSNVUwN0lYUFVQUT09DQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t"))
    theStore.addCredentials(theDomain, secretText)
    }

def configureClusterConnection(AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,AWS_CLUSTER_NAME,DEPLOYMENT_NAMESPACE){
    sh(script: "aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}", returnStdout: true).trim()
    sh(script: "aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}", returnStdout: true).trim()
    sh(script: "aws configure set region ${AWS_REGION}", returnStdout: true).trim()
    sh(script: "aws eks --region ${AWS_REGION} update-kubeconfig --name ${AWS_CLUSTER_NAME}", returnStdout: true).trim()
    sh(script: "kubectl config set-context --current --namespace=${DEPLOYMENT_NAMESPACE}", returnStdout: true).trim()
}

def extractIPList(){
    sh(script: "kubectl get svc | grep forgerock-repl-server- | awk '{print \$4}' > rsIpList.txt", returnStdout: true).trim()
    sh(script: "kubectl get svc | grep forgerock-user-store- | awk '{print \$4}' > usIpList.txt", returnStdout: true).trim()

    sh 'export rs_global_repl_svc_ip1=$(ping -c 1 -4 $(head -1 rsIpList.txt) | grep -Eo \\([0-9]+\\\\.\\){3}[0-9]+)'
    sh 'export hostAliases_ip_rs_1=$(ping -c 1 -4 $(head -1 rsIpList.txt) | grep -Eo \\([0-9]+\\\\.\\){3}[0-9]+)'
    sh 'export rs_global_repl_svc_ip2=$(ping -c 1 -4 $(tail -1 rsIpList.txt) | grep -Eo \\([0-9]+\\\\.\\){3}[0-9]+)'
    sh 'export hostAliases_ip_rs_2=$(ping -c 1 -4 $(tail -1 rsIpList.txt) | grep -Eo \\([0-9]+\\\\.\\){3}[0-9]+)'

    sh 'export us_global_repl_svc_ip1=$(ping -c 1 -4 $(head -1 usIpList.txt) | grep -Eo \\([0-9]+\\\\.\\){3}[0-9]+)'
    sh 'export hostAliases_ip_us_1=$(ping -c 1 -4 $(head -1 usIpList.txt) | grep -Eo \\([0-9]+\\\\.\\){3}[0-9]+)'
    sh 'export us_global_repl_svc_ip2=$(ping -c 1 -4 $(tail -1 usIpList.txt) | grep -Eo \\([0-9]+\\\\.\\){3}[0-9]+)'
    sh 'export hostAliases_ip_us_2=$(ping -c 1 -4 $(tail -1 usIpList.txt) | grep -Eo \\([0-9]+\\\\.\\){3}[0-9]+)'


    sh(script: "echo \${rs_global_repl_svc_ip1} ,  \${rs_global_repl_svc_ip2}, \${us_global_repl_svc_ip1}, \${us_global_repl_svc_ip2}", returnStdout: true).trim() 
}

pipeline {
    agent any
    
    parameters {
        booleanParam(name: "BUILD_BASE_IMAGES", defaultValue: false)
        booleanParam(name: "BUILD_CHILD_IMAGES", defaultValue: false)
        booleanParam(name: "CLEAR", defaultValue: false)
        booleanParam(name: "SETUP", defaultValue: false)
        booleanParam(name: "CREATE_SECRETS", defaultValue: false)
        booleanParam(name: "UPDATE_CERTIFICATES", defaultValue: false)
        booleanParam(name: "RETRIEVE_SECRETS", defaultValue: false)
        booleanParam(name: "DEPLOY_RS", defaultValue: false)
        booleanParam(name: "DEPLOY_US", defaultValue: false)
        booleanParam(name: "DEPLOY_IDM", defaultValue: false)
        gitParameter branchFilter: 'origin/(scb.*)', defaultValue: 'master', name: 'BRANCH', type: 'PT_BRANCH'
        string(defaultValue: 'us-west-2',name: 'BLUE_AWS_REGION', trim: true)
        string(defaultValue: 'fr-us-west-2',name: 'BLUE_AWS_CLUSTER_NAME', trim: true)
        string(defaultValue: 'application-3', name: 'BLUE_DEPLOYMENT_NAMESPACE', trim: true)
        string(defaultValue: 'ca-central-1',name: 'GREEN_AWS_REGION', trim: true)
        string(defaultValue: 'fr-ca-central-1',name: 'GREEN_AWS_CLUSTER_NAME', trim: true)
        string(defaultValue: 'application-3', name: 'GREEN_DEPLOYMENT_NAMESPACE', trim: true)
        string(defaultValue: 'scb-ubi', name: 'BUILD_BASE_IMAGES_TAG', trim: true)
        string(defaultValue: 'scb-ubi', name: 'BUILD_CHILD_IMAGES_TAG', trim: true)
        string(defaultValue: 'scb-ubi', name: 'DEPLOYMENT_IMAGES_TAG', trim: true)
        choice(name: 'REPLICAS', choices: ['1', '2'], description:  'Pick number of replicas')
        string(defaultValue: 'am.global.standardchartered.com', name: 'BLUE_AM_LB_DOMAIN', trim: true)
        string(defaultValue: 'am.global.standardchartered.com', name: 'GREEN_AM_LB_DOMAIN', trim: true)
        string(defaultValue: 'iPlanetDirectoryPro', name: 'COOKIE_NAME', trim: true)
        choice(name: 'SECRETS_MODE', choices: ['k8s', 'REST'], description:  'Pick secrets mode')
        choice(name: 'CLUSTER_TYPE', choices: ['blue', 'green'], description:  'Pick cluster type')
    }

    environment {
        path_gcp_registry_admin = "/tmp/gcp-docker-registry-admin.json"
        path_kubeconfig = "$HOME/.kube/config"
        IMAGE_PULL_SECRETS = 'fr-nexus-docker'
        GCP_REGISTRY_ADMIN = credentials('GCP_REGISTRY_ADMIN')
        NAMESPACE = "${DEPLOYMENT_NAMESPACE}"
        BUILD_BASE_IMAGES_TAG = "${params.BUILD_BASE_IMAGES_TAG}"
        BUILD_CHILD_IMAGES_TAG = "${params.BUILD_CHILD_IMAGES_TAG}"
        DEPLOY_IMAGES_TAG = "${DEPLOYMENT_IMAGES_TAG}"
        secrets_mode = "${params.SECRETS_MODE}"
        VAULT_BASE_URL="https://midships-vault.vault.6ab12ea5-c7af-456f-81b5-e0aaa5c9df5e.aws.hashicorp.cloud:8200"
        VAULT_TOKEN="s.kms8RFodqcEzxmmEHn3MD3GB.MV86d"
        ENV_TYPE =  "fr7"
        SECRETS_BASE_PATH = "forgerock/data/${ENV_TYPE}/"
        CONFIGSTORE_VAULT_PATH =  "${SECRETS_BASE_PATH}config-store"
        USERSTORE_VAULT_PATH =  "${SECRETS_BASE_PATH}user-store"
        TOKENSTORE_VAULT_PATH =  "${SECRETS_BASE_PATH}token-store"
        REPLSERVER_VAULT_PATH =  "${SECRETS_BASE_PATH}repl-server"
        AM_VAULT_PATH =  "${SECRETS_BASE_PATH}access-manager"
        IDM_VAULT_PATH = ""
        DEPLOY_IDM = "${params.DEPLOY_IDM}"
        DEPLOY_DS_IMAGES = "${params.DEPLOY_DS_IMAGES}"
        // AM_LB_DOMAIN =  "${AM_LB_DOMAIN}"
        DS_REPLICAS_CS =  "${params.REPLICAS}"
        DS_REPLICAS_US =  "${params.REPLICAS}"
        DS_REPLICAS_TS =  "${params.REPLICAS}"
        DS_REPLICAS_RS =  "${params.REPLICAS}"
        AM_REPLICAS =  "${params.REPLICAS}"
        IDM_REPLICAS =  "${params.REPLICAS}"
        AM_COOKIE_NAME =  "${COOKIE_NAME}"
        SELF_REPL_TS =  "false"
        SELF_REPL_US =  "false"
        SELF_REPL_CS =  "true"
        // AM_VAULT_RUNTIME_PATH =  "forgerock/data/${ENV_TYPE}/runtime/access-manager"
        // CS_K8S_SVC_URL =  "forgerock-access-manager.${NAMESPACE}.svc.cluster.local"
        // TS_K8S_SVC_URL =  "forgerock-token-store.${NAMESPACE}.svc.cluster.local"
        // US_K8S_SVC_URL =  "forgerock-user-store.${NAMESPACE}.svc.cluster.local"
        USERSTORE_LOAD_SCHEMA =  "true"
        USERSTORE_LOAD_DSCONFIG =  "true"
        EXTERNAL_POLICY_STORE =  "false"
        AM_AMSTER_FILES =  'amster_DefaultCtsDataStoreProperties\\,amster_platform'
        AM_AUTH_TREES =  'authTrees_customers_login.sh\\,authTrees_customers_register.sh\\,authTrees_customers_stepup.sh'
        PODNAME_AM =  "forgerock-access-manager"
        PODNAME_CS =  "forgerock-config-store"
        PODNAME_US =  "forgerock-user-store"
        PODNAME_TS =  "forgerock-token-store"
        PODNAME_RS =  "forgerock-repl-server"
        PODNAME_IDM =  "forgerock-idm"
        SERVICENAME_AM =  "forgerock-access-manager"
        SERVICENAME_CS =  "forgerock-config-store"
        SERVICENAME_US =  "forgerock-user-store"
        SERVICENAME_TS =  "forgerock-token-store"
        SERVICENAME_RS =  "forgerock-repl-server"
        SERVICENAME_IDM =  "forgerock-idm"
        // CI_REGISTRY_URL =  'gcr.io/massive-dynamo-235117'
        CI_REGISTRY_URL =  'aasaleh'
        JAVA_BASE_CONTAINER_IMAGE =  "${CI_REGISTRY_URL}/java-base"
        TOMCAT_BASE_CONTAINER_IMAGE =  "${CI_REGISTRY_URL}/tomcat-base"
        AM_BASE_CONTAINER_IMAGE =  "${CI_REGISTRY_URL}/am-base"
        DS_BASE_CONTAINER_IMAGE =  "${CI_REGISTRY_URL}/ds-base"
        AM_CONTAINER_IMAGE =  "${CI_REGISTRY_URL}/forgerock-access-manager"
        CFGSTORE_CONTAINER_IMAGE =  "${CI_REGISTRY_URL}/forgerock-config-store"
        TOKENSTORE_CONTAINER_IMAGE =  "${CI_REGISTRY_URL}/forgerock-token-store"
        USERSTORE_CONTAINER_IMAGE =  "${CI_REGISTRY_URL}/forgerock-user-store"
        POLICYSTORE_CONTAINER_IMAGE =  "${CI_REGISTRY_URL}/forgerock-policy-store"
        REPLSERVER_CONTAINER_IMAGE =  "${CI_REGISTRY_URL}/forgerock-repl-server"
        IDM_CONTAINER_IMAGE =  "${CI_REGISTRY_URL}/forgerock-idm"
        CLOUD_TYPE =  'sftp'
        STORAGE_BUCKET_PATH_JDK =  'gs://ready-to-integrate/bin/oracle/jdk'
        STORAGE_BUCKET_PATH_DS =  'gs://ready-to-integrate/bin/forgerock/directory-services'
        CFG_CUSTOM_JAVA =  "false"
        US_CUSTOM_JAVA =  "false"
        TS_CUSTOM_JAVA =  "false"
        RPL_CUSTOM_JAVA =  "false"
        PS_CUSTOM_JAVA =  "false"
        K8S_LOCATION =  "azure"
        FR_KUBE_CONFIG =  ""
        cs_base64_cert_text = ""
        cs_base64_cert_key_text = ""
        rs_base64_cert = ""
        rs_base64_cert_key_text = ""
        ts_base64_cert_text = ""
        ts_base64_cert_key_text = ""
        us_base64_cert_text = ""
        us_base64_cert_key_text = ""
        am_base64_cert_text = ""
        am_base64_cert_key_text = ""
        AWS_REGION = ""
        AWS_CLUSTER_NAME = ""
        DEPLOYMENT_NAMESPACE = ""
    }

    stages {
        stage('Get Branch Code'){
            steps {
                git branch: "${params.BRANCH}", credentialsId: 'midships_gitlab', url: 'https://gitlab.com/midships/forgerock-accelerator'
            }
        }
        stage('Build Base Docker Images'){
            when { expression { params.BUILD_BASE_IMAGES } }
            steps {
                script{
                    base64_decoded =  base64Decode("${GCP_REGISTRY_ADMIN}") 
                    writeFile(file: path_gcp_registry_admin, text: base64_decoded)
                }
                // cat ${path_gcp_registry_admin} | docker login -u _json_key --password-stdin https://gcr.io  
                withCredentials([usernamePassword(credentialsId: '22e5e774-0730-4a95-97bf-5d843d234286', passwordVariable: 'CI_REGISTRY_PASSWORD', usernameVariable: 'CI_REGISTRY_USER')]) {
                    sh '''
                        echo "Building base docker images..."
                        docker build --build-arg CLOUD_TYPE=${CLOUD_TYPE} --build-arg STORAGE_BUCKET_PATH_JDK=${STORAGE_BUCKET_PATH_JDK} --build-arg aws_access_key_id=${AWS_ACCESS_KEY_ID} --build-arg aws_secret_access_key=${AWS_SECRET_ACCESS_KEY} --build-arg ftp_uname=midships --build-arg ftp_pword=Midships202! -t ${JAVA_BASE_CONTAINER_IMAGE}:${BUILD_BASE_IMAGES_TAG} base-images/java-base/.
                        docker push ${JAVA_BASE_CONTAINER_IMAGE}:${BUILD_BASE_IMAGES_TAG}
                        
                        docker build --build-arg IMAGE_SRC=${JAVA_BASE_CONTAINER_IMAGE} --build-arg IMAGE_TAG=${BUILD_BASE_IMAGES_TAG} --build-arg aws_access_key_id=${AWS_ACCESS_KEY_ID} --build-arg aws_secret_access_key=${AWS_SECRET_ACCESS_KEY} --build-arg CLOUD_TYPE=${CLOUD_TYPE} --build-arg STORAGE_BUCKET_PATH_DS=${STORAGE_BUCKET_PATH_DS} --build-arg ftp_uname=midships --build-arg ftp_pword=Midships202! -t ${DS_BASE_CONTAINER_IMAGE}:${BUILD_BASE_IMAGES_TAG} base-images/ds-base/.
                        docker push ${DS_BASE_CONTAINER_IMAGE}:${BUILD_BASE_IMAGES_TAG}                                                
                    '''
                }
            }
            
        }
        stage('Build Child Docker Images'){
            when { expression { params.BUILD_CHILD_IMAGES } }
            steps {
                script{
                    base64_decoded =  base64Decode("${GCP_REGISTRY_ADMIN}") 
                    writeFile(file: path_gcp_registry_admin, text: base64_decoded)
                }
                // cat ${path_gcp_registry_admin} | docker login -u _json_key --password-stdin https://gcr.io  
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',credentialsId: "admin_aws_access",accessKeyVariable: 'AWS_ACCESS_KEY_ID',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh '''
                        echo "Building child docker images..."
                      
                        docker build --build-arg IMAGE_SRC=${DS_BASE_CONTAINER_IMAGE} --build-arg IMAGE_TAG=${BUILD_BASE_IMAGES_TAG} --build-arg ftp_uname=midships --build-arg ftp_pword=Midships202! -t ${REPLSERVER_CONTAINER_IMAGE}:${BUILD_CHILD_IMAGES_TAG} child-images/repl-server/.
                        docker push ${REPLSERVER_CONTAINER_IMAGE}:${BUILD_CHILD_IMAGES_TAG}
                        
                        docker build --build-arg IMAGE_SRC=${DS_BASE_CONTAINER_IMAGE} --build-arg IMAGE_TAG=${BUILD_BASE_IMAGES_TAG} --build-arg ftp_uname=midships --build-arg ftp_pword=Midships202! -t ${USERSTORE_CONTAINER_IMAGE}:${BUILD_CHILD_IMAGES_TAG} child-images/user-store/.
                        docker push ${USERSTORE_CONTAINER_IMAGE}:${BUILD_CHILD_IMAGES_TAG}
                        
                        docker build --build-arg IMAGE_SRC=${JAVA_BASE_CONTAINER_IMAGE} --build-arg IMAGE_TAG=${BUILD_BASE_IMAGES_TAG} --build-arg ftp_uname=midships --build-arg ftp_pword=Midships202! -t ${IDM_CONTAINER_IMAGE}:${BUILD_CHILD_IMAGES_TAG} child-images/idm/.
                        docker push ${IDM_CONTAINER_IMAGE}:${BUILD_CHILD_IMAGES_TAG}
                    '''
                }
            }          
        }
        stage('Clear Down Environment'){
            when { expression { params.CLEAR } }
            steps {
                script{
                    if(CLUSTER_TYPE == "blue"){
                        AWS_REGION = "${BLUE_AWS_REGION}"
                        AWS_CLUSTER_NAME = "${BLUE_AWS_CLUSTER_NAME}"
                        DEPLOYMENT_NAMESPACE = "${BLUE_DEPLOYMENT_NAMESPACE}"
                    }
                    else{
                        AWS_REGION = "${GREEN_AWS_REGION}"
                        AWS_CLUSTER_NAME = "${GREEN_AWS_CLUSTER_NAME}"
                        DEPLOYMENT_NAMESPACE = "${GREEN_DEPLOYMENT_NAMESPACE}"
                    }
                    
                }
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',credentialsId: "admin_aws_access",accessKeyVariable: 'AWS_ACCESS_KEY_ID',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    configureClusterConnection(AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,AWS_CLUSTER_NAME,DEPLOYMENT_NAMESPACE)
                }
                script {
                    try {
                        sh(script: "kubectl get ns ${DEPLOYMENT_NAMESPACE}", returnStdout: true).trim()
                        sh(script: "helm ls --all --short -n ${DEPLOYMENT_NAMESPACE} | xargs helm uninstall -n ${DEPLOYMENT_NAMESPACE}", returnStdout: true).trim()
                        sh(script: "kubectl delete pvc,pv --all --force --grace-period=0 -n ${DEPLOYMENT_NAMESPACE}", returnStdout: true).trim()
                        sh(script: "kubectl delete ns ${DEPLOYMENT_NAMESPACE}", returnStdout: true).trim()
                        echo "Waiting 30 seconds for SVC to finish clearing up ..."
                        sleep(time: 30, unit: "SECONDS")
                    }
                    catch (error) {
                        echo "Namespace ${DEPLOYMENT_NAMESPACE} doesn't exist"
                    }
                }
            }
        }
        stage('Setup Cluster Pre-requisites') {
            when { expression { params.SETUP } }
            steps {
                echo 'Setup Cluster Pre-requisites'
                script{
                    base64_decoded =  base64Decode("${GCP_REGISTRY_ADMIN}") 
                    writeFile(file: path_gcp_registry_admin, text: base64_decoded)
                }
                script {
                    if(CLUSTER_TYPE == "blue"){
                        DEPLOYMENT_NAMESPACE = "${BLUE_DEPLOYMENT_NAMESPACE}"
                    }
                    else{
                        DEPLOYMENT_NAMESPACE = "${GREEN_DEPLOYMENT_NAMESPACE}"
                    }
                    try {
                        sh(script: "kubectl get ns ${DEPLOYMENT_NAMESPACE}", returnStdout: true).trim()
                    }
                    catch (error) {
                        sh(script: "kubectl config current-context", returnStdout: true).trim()
                        sh(script: "kubectl create ns ${DEPLOYMENT_NAMESPACE}", returnStdout: true).trim()
                    }
                }
                
                script{
                    sh(script: "kubectl config set-context --current --namespace=${DEPLOYMENT_NAMESPACE}", returnStdout: true).trim()
                    try {
                        sh(script: "kubectl create secret docker-registry ${IMAGE_PULL_SECRETS} --docker-server=gcr.io --docker-username=_json_key --docker-email=taweh@midships.io --docker-password=\$(cat ${path_gcp_registry_admin}) --namespace ${DEPLOYMENT_NAMESPACE}", returnStdout: true).trim()
                    }
                    catch (error) {
                        echo "Namespace ${DEPLOYMENT_NAMESPACE} already exists and configured"
                    }
                }
                
            }
        }
        stage('Create secrets'){
            when { expression { params.CREATE_SECRETS } }
            steps {
                script{
                    def instance = Jenkins.instance 
                    domain = Domain.global()
                    @NonCPS
                    list = instance.getExtensionList("com.cloudbees.plugins.credentials.SystemCredentialsProvider")
                    @NonCPS
                    store = list[0].getStore()

                    createConfigStoreSecrets(domain,store)
                    creatReplServerSecrets(domain,store)
                    createUserStoreSecrets(domain,store)
                    createTokenStoreSecrets(domain,store)
                    createAccessManagerSecrets(domain,store)
                }
            }
        }
        stage('Update Certificates'){
            when { expression { params.UPDATE_CERTIFICATES } }
            steps {
                script{
                    println "UPDATING CERTIFICATES"
                    sh '''
                        chmod 660 secrets-and-configs/generate-offline-certificates.sh
                        chmod +x secrets-and-configs/generate-offline-certificates.sh
                        rm -rf secrets-and-configs/generated-certs
                        secrets-and-configs/generate-offline-certificates.sh -ns1 ${BLUE_DEPLOYMENT_NAMESPACE} -ns2 ${GREEN_DEPLOYMENT_NAMESPACE} -amfqdn1 ${BLUE_AM_LB_DOMAIN} -amfqdn2 ${GREEN_AM_LB_DOMAIN} -svcAM forgerock-access-manager -svcUS forgerock-user-store -svcTS forgerock-token-store -svcCS forgerock-config-store -svcRS forgerock-repl-server -svcIDM forgerock-idm -svcIG forgerock-ig
                    '''
                    cs_base64_cert_text = sh(script: "cat secrets-and-configs/generated-certs/cs-cert/config-store", returnStdout: true).trim()
                    cs_base64_cert_key_text = sh(script: "cat secrets-and-configs/generated-certs/cs-cert/config-store-key", returnStdout: true).trim()
                    ts_base64_cert_text = sh(script: "cat secrets-and-configs/generated-certs/ts-cert/token-store", returnStdout: true).trim()
                    ts_base64_cert_key_text = sh(script: "cat secrets-and-configs/generated-certs/ts-cert/token-store-key", returnStdout: true).trim()
                    us_base64_cert_text = sh(script: "cat secrets-and-configs/generated-certs/us-cert/user-store", returnStdout: true).trim()
                    us_base64_cert_key_text = sh(script: "cat secrets-and-configs/generated-certs/us-cert/user-store-key", returnStdout: true).trim()
                    rs_base64_cert_text = sh(script: "cat secrets-and-configs/generated-certs/rs-cert-1/repl-server", returnStdout: true).trim()
                    rs_base64_cert_key_text = sh(script: "cat secrets-and-configs/generated-certs/rs-cert-1/repl-server-key", returnStdout: true).trim()
                    am_base64_cert_text = sh(script: "cat secrets-and-configs/generated-certs/am-cert/access-manager", returnStdout: true).trim()
                    am_base64_cert_key_text = sh(script: "cat secrets-and-configs/generated-certs/am-cert/access-manager-key", returnStdout: true).trim()
                    idm_base64_cert_text = sh(script: "cat secrets-and-configs/generated-certs/idm-cert/identity-manager", returnStdout: true).trim()
                    idm_base64_cert_key_text = sh(script: "cat secrets-and-configs/generated-certs/idm-cert/identity-manager-key", returnStdout: true).trim()
                    

                    def instance = Jenkins.instance 
                    domain = Domain.global()
                    @NonCPS
                    list = instance.getExtensionList("com.cloudbees.plugins.credentials.SystemCredentialsProvider")
                    @NonCPS
                    store = list[0].getStore()
                    def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl.class,instance)

                    creds.each { 
                        
                        if(it.getId() == "forgerock_cs_certificate"){
                            // println it.getId() 
                            old_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_cs_certificate","forgerock_cs_certificate",it.getSecret())
                            println "****** cs_base64_cert_text ******"
                            // println it.getSecret()
                            thesecret = Secret.fromString(cs_base64_cert_text)
                            new_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_cs_certificate","forgerock_cs_certificate",Secret.fromString(cs_base64_cert_text))
                            store.updateCredentials(domain,  old_secret, new_secret)
                        }
                        else if(it.getId() == "forgerock_cs_certificateKey"){
                            // println it.getId() 
                            println "****** forgerock_cs_certificateKey ******"
                            // println it.getSecret()
                            old_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_cs_certificateKey","forgerock_cs_certificateKey",it.getSecret())
                            new_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_cs_certificateKey","forgerock_cs_certificateKey",Secret.fromString(cs_base64_cert_key_text))
                            store.updateCredentials(domain,  old_secret, new_secret)
                        }
                        else if(it.getId() == "forgerock_rs_certificate"){
                            // println it.getId()
                            println "****** forgerock_rs_certificate ******"
                            // println it.getSecret()
                            old_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_rs_certificate","forgerock_rs_certificate",it.getSecret())
                            new_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_rs_certificate","forgerock_rs_certificate",Secret.fromString(rs_base64_cert_text))
                            store.updateCredentials(domain,  old_secret, new_secret)
                        }
                        else if(it.getId() == "forgerock_rs_certificateKey"){
                            // println it.getId()
                            println "****** forgerock_rs_certificateKey ******"
                            // println it.getSecret()
                            old_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_rs_certificateKey","forgerock_rs_certificateKey",it.getSecret())
                            new_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_rs_certificateKey","forgerock_rs_certificateKey",Secret.fromString(rs_base64_cert_key_text))
                            store.updateCredentials(domain,  old_secret, new_secret)
                        }
                        else if(it.getId() == "forgerock_us_certificate"){
                            // println it.getId()
                            println "****** forgerock_us_certificate ******"
                            // println it.getSecret()
                            old_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_us_certificate","forgerock_us_certificate",it.getSecret())
                            new_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_us_certificate","forgerock_us_certificate",Secret.fromString(us_base64_cert_text))
                            store.updateCredentials(domain,  old_secret, new_secret)
                        }
                        else if(it.getId() == "forgerock_us_certificateKey"){
                            // println it.getId()
                            println "****** forgerock_us_certificateKey ******"
                            // println it.getSecret()
                            old_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_us_certificateKey","forgerock_us_certificateKey",it.getSecret())
                            new_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_us_certificateKey","forgerock_us_certificateKey",Secret.fromString(us_base64_cert_key_text))
                            store.updateCredentials(domain,  old_secret, new_secret)
                        }
                        else if(it.getId() == "forgerock_ts_certificate"){
                            // println it.getId()
                            println "****** forgerock_ts_certificate ******"
                            // println it.getSecret()
                            old_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_ts_certificate","forgerock_ts_certificate",it.getSecret())
                            new_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_ts_certificate","forgerock_ts_certificate",Secret.fromString(ts_base64_cert_text))
                            store.updateCredentials(domain,  old_secret, new_secret)
                        }
                        else if(it.getId() == "forgerock_ts_certificateKey"){
                            // println it.getId()
                            println "****** forgerock_ts_certificateKey ******"
                            // println it.getSecret()
                            old_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_ts_certificateKey","forgerock_ts_certificateKey",it.getSecret())
                            new_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_ts_certificateKey","forgerock_ts_certificateKey",Secret.fromString(ts_base64_cert_key_text))
                            store.updateCredentials(domain,  old_secret, new_secret)
                        }
                        else if(it.getId() == "forgerock_am_certificate"){
                            // println it.getId()
                            println "****** forgerock_am_certificate ******"
                            // println it.getSecret()
                            old_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_certificate","forgerock_am_certificate",it.getSecret())
                            new_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_certificate","forgerock_am_certificate",Secret.fromString(am_base64_cert_text))
                            store.updateCredentials(domain,  old_secret, new_secret)
                        }
                        else if(it.getId() == "forgerock_am_certificateKey"){
                            // println it.getId()
                            println "****** forgerock_am_certificateKey ******"
                            // println it.getSecret()
                            old_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_certificateKey","forgerock_am_certificateKey",it.getSecret())
                            new_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_am_certificateKey","forgerock_am_certificateKey",Secret.fromString(am_base64_cert_key_text))
                            store.updateCredentials(domain,  old_secret, new_secret)
                        }
                        else if(it.getId() == "forgerock_idm_certificate"){
                            // println it.getId()
                            println "****** forgerock_idm_certificate ******"
                            // println it.getSecret()
                            old_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_idm_certificate","forgerock_idm_certificate",it.getSecret())
                            new_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_idm_certificate","forgerock_idm_certificate",Secret.fromString(idm_base64_cert_text))
                            store.updateCredentials(domain,  old_secret, new_secret)
                        }
                        else if(it.getId() == "forgerock_idm_certificateKey"){
                            // println it.getId()
                            println "****** forgerock_idm_certificateKey ******"
                            // println it.getSecret()
                            old_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_idm_certificateKey","forgerock_idm_certificateKey",it.getSecret())
                            new_secret = new StringCredentialsImpl(CredentialsScope.GLOBAL,"forgerock_idm_certificateKey","forgerock_idm_certificateKey",Secret.fromString(idm_base64_cert_key_text))
                            store.updateCredentials(domain,  old_secret, new_secret)
                        }
                    }
                }
            }
        }
        stage('Setup K8s secrets and Config-Maps'){
            when { expression { params.RETRIEVE_SECRETS } }
            steps {
                    script{
                        if(CLUSTER_TYPE == "blue"){
                            DEPLOYMENT_NAMESPACE = "${BLUE_DEPLOYMENT_NAMESPACE}"
                        }
                        else{
                            DEPLOYMENT_NAMESPACE = "${GREEN_DEPLOYMENT_NAMESPACE}"
                        }
                    }

                    script{
                        def forgerock_rs_certificate = ""
                        def forgerock_rs_certificateKey = ""
                        def forgerock_rs_deploymentKey = ""
                        def forgerock_rs_keystorePwd = ""
                        def forgerock_rs_monitorUserPassword = ""
                        def forgerock_rs_rootUserPassword = ""
                        def forgerock_rs_truststorePwd = ""

                        def forgerock_us_amIdentityStoreAdminPassword = ""
                        def forgerock_us_deploymentKey = ""
                        def forgerock_us_monitorUserPassword = ""
                        def forgerock_us_rootUserPassword = ""
                        def forgerock_us_truststorePwd = ""
                        def forgerock_us_userStoreCertPwd = ""
                        def forgerock_us_certificate = ""
                        def forgerock_us_certificateKey = ""

                        println "-> Getting Replication Server secrets"
                        forgerock_rs_certificate = base64Decode(getSecretFromJenkins("forgerock_rs_certificate"))
                        forgerock_rs_certificateKey = base64Decode(getSecretFromJenkins("forgerock_rs_certificateKey"))
                        forgerock_rs_deploymentKey = getSecretFromJenkins("forgerock_rs_deploymentKey")
                        forgerock_rs_keystorePwd = getSecretFromJenkins("forgerock_rs_keystorePwd")
                        forgerock_rs_monitorUserPassword = getSecretFromJenkins("forgerock_rs_monitorUserPassword")
                        forgerock_rs_rootUserPassword = getSecretFromJenkins("forgerock_rs_rootUserPassword")
                        forgerock_rs_truststorePwd = getSecretFromJenkins("forgerock_rs_truststorePwd")

                        println "-> Getting User Store secrets"
                        forgerock_us_amIdentityStoreAdminPassword = getSecretFromJenkins("forgerock_us_amIdentityStoreAdminPassword")
                        forgerock_us_deploymentKey = getSecretFromJenkins("forgerock_us_deploymentKey")
                        forgerock_us_monitorUserPassword = getSecretFromJenkins("forgerock_us_monitorUserPassword")
                        forgerock_us_rootUserPassword = getSecretFromJenkins("forgerock_us_rootUserPassword")
                        forgerock_us_truststorePwd = getSecretFromJenkins("forgerock_us_truststorePwd")
                        forgerock_us_userStoreCertPwd = getSecretFromJenkins("forgerock_us_userStoreCertPwd")
                        forgerock_us_certificate = base64Decode(getSecretFromJenkins("forgerock_us_certificate"))
                        forgerock_us_certificateKey = base64Decode(getSecretFromJenkins("forgerock_us_certificateKey"))

                        sh """
                            helm upgrade --install --wait --timeout 10m0s \
                                --set idm.pod_name="$PODNAME_IDM" \
                                --set userstore.pod_name="$PODNAME_US" \
                                --set userstore.amIdentityStoreAdminPassword="${forgerock_us_amIdentityStoreAdminPassword}" \
                                --set userstore.deploymentKey="${forgerock_us_deploymentKey}" \
                                --set userstore.monitorUserPassword="${forgerock_us_monitorUserPassword}" \
                                --set userstore.rootUserPassword="${forgerock_us_rootUserPassword}" \
                                --set userstore.truststorePwd="${forgerock_us_truststorePwd}" \
                                --set userstore.userStoreCertPwd="${forgerock_us_userStoreCertPwd}" \
                                --set userstore.certificate="${forgerock_us_certificate}" \
                                --set userstore.certificateKey="${forgerock_us_certificateKey}" \
                                --set replserver.pod_name="$PODNAME_RS" \
                                --set replserver.certificate="${forgerock_rs_certificate}" \
                                --set replserver.certificateKey="${forgerock_rs_certificateKey}" \
                                --set replserver.deploymentKey="${forgerock_rs_deploymentKey}" \
                                --set replserver.keystorePwd="${forgerock_rs_keystorePwd}" \
                                --set replserver.truststorePwd="${forgerock_rs_truststorePwd}" \
                                --set replserver.monitorUserPassword="${forgerock_rs_monitorUserPassword}" \
                                --set replserver.rootUserPassword="${forgerock_rs_rootUserPassword}" \
                                --set secrets.namespace="$DEPLOYMENT_NAMESPACE" \
                                --namespace "$DEPLOYMENT_NAMESPACE" \
                                forgerock-secrets-and-configmaps secrets-and-configs/kubernetes/
                        """
                    }
            }
        }
        stage('Deploy a DS Component(s)') {
            when { 
                anyOf{
                    expression { params.DEPLOY_RS } 
                    expression { params.DEPLOY_US } 
                }
            }
            steps {
                echo "params.SECRETS_MODE is ${SECRETS_MODE}"
                script{
                    sh(script: "chmod 660 cicd-scripts/deploy-multi-region.sh && chmod +x cicd-scripts/deploy-multi-region.sh", returnStdout: true).trim()
                    if(CLUSTER_TYPE == "green"){
                        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',credentialsId: "admin_aws_access",accessKeyVariable: 'AWS_ACCESS_KEY_ID',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                            configureClusterConnection(AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,BLUE_AWS_REGION,BLUE_AWS_CLUSTER_NAME,BLUE_DEPLOYMENT_NAMESPACE)
                        }
                        extractIPList()
                        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',credentialsId: "admin_aws_access",accessKeyVariable: 'AWS_ACCESS_KEY_ID',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                            configureClusterConnection(AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,GREEN_AWS_REGION,GREEN_AWS_CLUSTER_NAME,GREEN_DEPLOYMENT_NAMESPACE)
                        }
                    }
                    sh 'cicd-scripts/deploy-multi-region.sh'
                }
            }
        }
    }
}
